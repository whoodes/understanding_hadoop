<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4161px" height="2320px" viewBox="-0.5 -0.5 4161 2320" content="&lt;mxfile modified=&quot;2019-06-27T02:04:23.059Z&quot; host=&quot;www.draw.io&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot; version=&quot;10.8.1&quot; etag=&quot;MN3S1opMchdXiY5KM3a3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;n73HqSdXbu6ViPsut5pn&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><rect x="0" y="9" width="730" height="1230" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(5.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="713" height="1238" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1238px; max-width: 718px; width: 714px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>ReduceTask.java</h1><pre>@Override<br />@SuppressWarnings(<span>"unchecked"</span>)<br /><span>public void </span>run(JobConf job<span>, final </span>TaskUmbilicalProtocol umbilical)<br /><span>throws </span>IOException<span>, </span>InterruptedException<span>, </span>ClassNotFoundException {<br />  job.setBoolean(JobContext.SKIP_RECORDS<span>, </span>isSkipping())<span>;<br /></span><span><br /></span><span>  if </span>(isMapOrReduce()) {<br />    copyPhase = getProgress().addPhase(<span>"copy"</span>)<span>;<br /></span>    sortPhase  = getProgress().addPhase(<span>"sort"</span>)<span>;<br /></span>    reducePhase = getProgress().addPhase(<span>"reduce"</span>)<span>;<br /></span>  }</pre><pre><br /><span>  // start thread that will handle communication with parent<br /></span>  TaskReporter reporter = startReporter(umbilical)<span>;<br /></span><span><br /></span><span>  boolean </span>useNewApi = job.getUseNewReducer()<span>;<br /></span>  initialize(job<span>, </span>getJobID()<span>, </span>reporter<span>, </span>useNewApi)<span>;<br /></span><span><br /></span><span>  // check if it is a cleanupJobTask<br /></span><span>  if </span>(jobCleanup) {<br />    runJobCleanupTask(umbilical<span>, </span>reporter)<span>;<br /></span><span>    return;<br /></span>  }<br /><span>  if </span>(jobSetup) {<br />    runJobSetupTask(umbilical<span>, </span>reporter)<span>;<br /></span><span>    return;<br /></span>  }<br /><span>  if </span>(taskCleanup) {<br />    runTaskCleanupTask(umbilical<span>, </span>reporter)<span>;<br /></span><span>    return;<br /></span>  }<br /><br /><span>  // Initialize the codec<br /></span>  codec = initCodec()<span>;<br /></span>  RawKeyValueIterator rIter = <span>null;<br /></span>  ShuffleConsumerPlugin shuffleConsumerPlugin = <span>null;<br /></span><span><br /></span>  Class combinerClass = conf.getCombinerClass()<span>;<br /></span>  CombineOutputCollector combineCollector = <br />    (<span>null </span>!= combinerClass) ? <br /><span>    new </span>CombineOutputCollector(reduceCombineOutputCounter<span>, </span>reporter<span>, </span>conf) : <span>null;<br /></span><span><br /></span>  Class&lt;? <span>extends </span>ShuffleConsumerPlugin&gt; clazz =<br />        job.getClass(MRConfig.SHUFFLE_CONSUMER_PLUGIN<span>, </span>Shuffle.<span>class, </span>ShuffleConsumerPlugin.<span>class</span>)<span>;<br /></span><span><br /></span>  shuffleConsumerPlugin = ReflectionUtils.newInstance(clazz<span>, </span>job)<span>;<br /></span>  LOG.info(<span>"Using ShuffleConsumerPlugin: " </span>+ shuffleConsumerPlugin)<span>;<br /></span><span><br /></span>  ShuffleConsumerPlugin.Context shuffleContext = <br /><span>  new </span>ShuffleConsumerPlugin.Context(getTaskID()<span>, </span>job<span>, </span>FileSystem.getLocal(job)<span>, </span>umbilical<span>, <br /></span><span>                super</span>.lDirAlloc<span>, </span>reporter<span>, </span>codec<span>, <br /></span>                combinerClass<span>, </span>combineCollector<span>, <br /></span>                spilledRecordsCounter<span>, </span>reduceCombineInputCounter<span>,<br /></span>                shuffledMapsCounter<span>,<br /></span>                reduceShuffleBytes<span>, </span>failedShuffleCounter<span>,<br /></span>                mergedMapOutputsCounter<span>,<br /></span>                taskStatus<span>, </span>copyPhase<span>, </span>sortPhase<span>, this,<br /></span>                mapOutputFile<span>, </span>localMapFiles)<span>;<br /></span><b><font color="#000000">  shuffleConsumerPlugin.init(shuffleContext);<br /></font></b><span><br /></span><b>  rIter = shuffleConsumerPlugin.run()<span>;<br /></span></b><span><br /></span><span>  // free up the data structures<br /></span>  mapOutputFilesOnDisk.clear()<span>;<br /></span><span><br /></span>  sortPhase.complete()<span>;                         </span><span>// sort is complete<br /></span>  setPhase(TaskStatus.Phase.REDUCE)<span>; <br /></span>  statusUpdate(umbilical)<span>;<br /></span>  Class keyClass = job.getMapOutputKeyClass()<span>;<br /></span>  Class valueClass = job.getMapOutputValueClass()<span>;<br /></span>  RawComparator comparator = job.getOutputValueGroupingComparator()<span>;<br /></span><span><br /></span><span>  if </span>(useNewApi) {<br />    runNewReducer(job<span>, </span>umbilical<span>, </span>reporter<span>, </span>rIter<span>, </span>comparator<span>, <br /></span>    keyClass<span>, </span>valueClass)<span>;<br /></span>  } <span>else </span>{<br />    runOldReducer(job<span>, </span>umbilical<span>, </span>reporter<span>, </span>rIter<span>, </span>comparator<span>,  <br /></span>  keyClass<span>, </span>valueClass)<span>;<br /></span>  }<br /><br />  shuffleConsumerPlugin.close()<span>;<br /></span>  done(umbilical<span>, </span>reporter)<span>;</span><span><br /></span>}</pre></div></div></foreignObject><text x="357" y="625" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="790" y="9" width="560" height="370" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(795.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="540" height="350" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 378px; max-width: 548px; width: 541px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Shuffle.java</h1><pre>@Override<br /><span>public void </span>init(ShuffleConsumerPlugin.Context context) {<br /><span>  this</span>.context = context<span>;<br /></span><span><br /></span><span>  this</span>.reduceId = context.getReduceId()<span>;<br /></span><span>  this</span>.jobConf = context.getJobConf()<span>;<br /></span><span>  this</span>.umbilical = context.getUmbilical()<span>;<br /></span><span>  this</span>.reporter = context.getReporter()<span>;<br /></span><span>  this</span>.metrics = ShuffleClientMetrics.create(context.getReduceId()<span>,<br /></span><span>      this</span>.jobConf)<span>;<br /></span><span>  this</span>.copyPhase = context.getCopyPhase()<span>;<br /></span><span>  this</span>.taskStatus = context.getStatus()<span>;<br /></span><span>  this</span>.reduceTask = context.getReduceTask()<span>;<br /></span><span>  this</span>.localMapFiles = context.getLocalMapFiles()<span>;<br /></span><span><br /></span>  scheduler = <span>new </span>ShuffleSchedulerImpl&lt;K<span>, </span>V&gt;(jobConf<span>, </span>taskStatus<span>, </span>reduceId<span>,<br /></span><span>      this, </span>copyPhase<span>, </span>context.getShuffledMapsCounter()<span>,<br /></span>      context.getReduceShuffleBytes()<span>, </span>context.getFailedShuffleCounter())<span>;<br /></span><b>  merger = createMergeManager(context)<span>;<br /></span></b>}</pre></div></div></foreignObject><text x="270" y="181" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 340 888 L 783.91 88.57" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 786.46 83.98 L 786.12 91.8 L 783.91 88.57 L 780 88.4 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 791 341 L 344 895.04" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 340.7 899.13 L 342.37 891.48 L 344 895.04 L 347.82 895.88 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="1480" y="9" width="560" height="220" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(1485.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="547" height="210" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 228px; max-width: 548px; width: 548px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Shuffle.java</h1><pre><pre>protected MergeManager&lt;K, V&gt; createMergeManager(<br />    ShuffleConsumerPlugin.Context context) {<br />  return <b>new </b><b>MergeManagerImpl&lt;K<span>, </span>V&gt;(reduceId<span>, </span>jobConf<span>, </span>context.getLocalFS()<span>,<br /></span>    context.getLocalDirAllocator()<span>, </span>reporter<span>, </span>context.getCodec()<span>,<br /></span>    context.getCombinerClass()<span>, </span>context.getCombineCollector()<span>, <br /></span>    context.getSpilledRecordsCounter()<span>,<br /></span>    context.getReduceCombineInputCounter()<span>,<br /></span>    context.getMergedMapOutputsCounter()<span>, this, </span>context.getMergePhase()<span>,<br /></span>    context.getMapOutputFile())</b><b>;</b><br />}</pre></pre></div></div></foreignObject><text x="274" y="111" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 1080 319 L 1474.63 67.42" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1479.06 64.6 L 1475.04 71.32 L 1474.63 67.42 L 1471.27 65.41 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1478 202 L 1086.07 327.06" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 1081.07 328.66 L 1086.67 323.2 L 1086.07 327.06 L 1088.8 329.87 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2110" y="9" width="620" height="1560" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(2115.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="562" height="1552" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1568px; max-width: 608px; width: 563px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><span>public </span>MergeManagerImpl(TaskAttemptID reduceId<span>, </span>JobConf jobConf<span>, <br /></span>            FileSystem localFS<span>,<br /></span>            LocalDirAllocator localDirAllocator<span>,  <br /></span>            Reporter reporter<span>,<br /></span>            CompressionCodec codec<span>,<br /></span>            Class&lt;? <span>extends </span>Reducer&gt; combinerClass<span>,<br /></span>            CombineOutputCollector&lt;K<span>,</span>V&gt; combineCollector<span>,<br /></span>            Counters.Counter spilledRecordsCounter<span>,<br /></span>            Counters.Counter reduceCombineInputCounter<span>,<br /></span>            Counters.Counter mergedMapOutputsCounter<span>,<br /></span>            ExceptionReporter exceptionReporter<span>,<br /></span>            Progress mergePhase<span>, </span>MapOutputFile mapOutputFile) {<br /><span>  this</span>.reduceId = reduceId<span>;<br /></span><span>  this</span>.jobConf = jobConf<span>;<br /></span><span>  this</span>.localDirAllocator = localDirAllocator<span>;<br /></span><span>  this</span>.exceptionReporter = exceptionReporter<span>;<br /></span><span><br /></span><span>  this</span>.reporter = reporter<span>;<br /></span><span>  this</span>.codec = codec<span>;<br /></span><span>  this</span>.combinerClass = combinerClass<span>;<br /></span><span>  this</span>.combineCollector = combineCollector<span>;<br /></span><span>  this</span>.reduceCombineInputCounter = reduceCombineInputCounter<span>;<br /></span><span>  this</span>.spilledRecordsCounter = spilledRecordsCounter<span>;<br /></span><span>  this</span>.mergedMapOutputsCounter = mergedMapOutputsCounter<span>;<br /></span><span>  this</span>.mapOutputFile = mapOutputFile<span>;<br /></span><span>  this</span>.mapOutputFile.setConf(jobConf)<span>;<br /></span><span><br /></span><span>  this</span>.localFS = localFS<span>;<br /></span><span>  this</span>.rfs = ((LocalFileSystem)localFS).getRaw()<span>;<br /></span><span><br /></span><span>  final float </span>maxInMemCopyUse =<br />    jobConf.getFloat(MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT<span>,<br /></span>      MRJobConfig.DEFAULT_SHUFFLE_INPUT_BUFFER_PERCENT)<span>;<br /></span><span>  if </span>(maxInMemCopyUse &gt; <span>1.0 </span>|| maxInMemCopyUse &lt; <span>0.0</span>) {<br /><span>    throw new </span>IllegalArgumentException(<span>"Invalid value for " </span>+<br />        MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT + <span>": " </span>+<br />        maxInMemCopyUse)<span>;<br /></span>  }<br /><br /><span>  // Allow unit tests to fix Runtime memory<br /></span><span>  this</span>.memoryLimit = (<span>long</span>)(jobConf.getLong(<br />      MRJobConfig.REDUCE_MEMORY_TOTAL_BYTES<span>,<br /></span>      Runtime.getRuntime().maxMemory()) * maxInMemCopyUse)<span>;</span></pre><pre><span><br /></span><span>  this</span>.ioSortFactor = jobConf.getInt(MRJobConfig.IO_SORT_FACTOR<span>,<br /></span>    MRJobConfig.DEFAULT_IO_SORT_FACTOR)<span>;<br /></span><span><br /></span><span>  final float </span>singleShuffleMemoryLimitPercent =<br />      jobConf.getFloat(MRJobConfig.SHUFFLE_MEMORY_LIMIT_PERCENT<span>,<br /></span>      DEFAULT_SHUFFLE_MEMORY_LIMIT_PERCENT)<span>;<br /></span><span>  if </span>(singleShuffleMemoryLimitPercent &lt; <span>0.0f<br /></span>    || singleShuffleMemoryLimitPercent &gt; <span>1.0f</span>) {<br /><span>       throw new </span>IllegalArgumentException(<span>"Invalid value for "<br /></span>         + MRJobConfig.SHUFFLE_MEMORY_LIMIT_PERCENT + <span>": "<br /></span>         + singleShuffleMemoryLimitPercent)<span>;<br /></span>  }<br /><br />  usedMemory = <span>0L</span><span>;<br /></span>  commitMemory = <span>0L</span><span>;<br /></span><span>  long </span>maxSingleShuffleLimitConfiged =<br />      (<span>long</span>)(memoryLimit * singleShuffleMemoryLimitPercent)<span>;<br /></span><span>  if</span>(maxSingleShuffleLimitConfiged &gt; Integer.MAX_VALUE) {<br />    maxSingleShuffleLimitConfiged = Integer.MAX_VALUE<span>;<br /></span>    LOG.info(<span>"The max number of bytes for a single in-memory shuffle cannot" </span>+<br /><span>      " be larger than Integer.MAX_VALUE. Setting it to Integer.MAX_VALUE"</span>)<span>;<br /></span>  }<br /><span>  this</span>.maxSingleShuffleLimit = maxSingleShuffleLimitConfiged<span>;<br /></span><span>  this</span>.memToMemMergeOutputsThreshold =<br />      jobConf.getInt(MRJobConfig.REDUCE_MEMTOMEM_THRESHOLD<span>, </span>ioSortFactor)<span>;<br /></span><span>  this</span>.mergeThreshold = (<span>long</span>)(<span>this</span>.memoryLimit * <br />                        jobConf.getFloat(<br />                          MRJobConfig.SHUFFLE_MERGE_PERCENT<span>,<br /></span>                          MRJobConfig.DEFAULT_SHUFFLE_MERGE_PERCENT))<span>;<br /></span>  LOG.info(<span>"MergerManager: memoryLimit=" </span>+ memoryLimit + <span>", " </span>+<br /><span>           "maxSingleShuffleLimit=" </span>+ maxSingleShuffleLimit + <span>", " </span>+<br /><span>           "mergeThreshold=" </span>+ mergeThreshold + <span>", " </span>+ <br /><span>           "ioSortFactor=" </span>+ ioSortFactor + <span>", " </span>+<br /><span>           "memToMemMergeOutputsThreshold=" </span>+ memToMemMergeOutputsThreshold)<span>;<br /></span><span><br /></span><span>  if </span>(<span>this</span>.maxSingleShuffleLimit &gt;= <span>this</span>.mergeThreshold) {<br /><span>    throw new </span>RuntimeException(<span>"Invalid configuration: "<br /></span>      + <span>"maxSingleShuffleLimit should be less than mergeThreshold "<br /></span>      + <span>"maxSingleShuffleLimit: " </span>+ <span>this</span>.maxSingleShuffleLimit<br />      + <span>"mergeThreshold: " </span>+ <span>this</span>.mergeThreshold)<span>;<br /></span>  }<br /><br /><span>  boolean </span>allowMemToMemMerge = <br />    jobConf.getBoolean(MRJobConfig.REDUCE_MEMTOMEM_ENABLED<span>, false</span>)<span>;<br /></span><span>    if </span>(allowMemToMemMerge) {<br /><span>      this</span>.memToMemMerger = <br /><span>        new </span>IntermediateMemoryToMemoryMerger(<span>this,<br /></span>                                             memToMemMergeOutputsThreshold)<span>;<br /></span><span>      this</span>.memToMemMerger.start()<span>;<br /></span>  } <span>else </span>{<br /><span>    this</span>.memToMemMerger = <span>null;<br /></span>  }<br /><br /><span>  this</span>.inMemoryMerger = createInMemoryMerger()<span>;<br /></span><b><span>  this</span>.inMemoryMerger.start()<span>;<br /></span></b><span><br /></span><span>  this</span>.onDiskMerger = <span>new </span>OnDiskMerger(<span>this</span>)<span>;<br /></span><b><span>  this</span>.onDiskMerger.start()<span>;<br /></span></b><span><br /></span><span>  this</span>.mergePhase = mergePhase<span>;<br /></span>}</pre></pre></pre></div></div></foreignObject><text x="281" y="782" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 2040 94 L 2103.13 67.47" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2107.97 65.43 L 2102.87 71.37 L 2103.13 67.47 L 2100.16 64.92 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2109 1533 L 2040.32 180.36" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2040.06 175.12 L 2043.91 181.93 L 2040.32 180.36 L 2036.92 182.29 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2830" y="9" width="450" height="490" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(2835.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="374" height="490" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 498px; max-width: 438px; width: 375px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeThread.java</h1><pre><pre><pre><pre><span>public void </span>run() {<br /><span>  while </span>(<span>true</span>) {<br />    List&lt;T&gt; inputs = <span>null;<br /></span><span>    try </span>{<br /><span>      // Wait for notification to start the merge...<br /></span><span>      synchronized </span>(pendingToBeMerged) {<br /><span>        while</span>(pendingToBeMerged.size() &lt;= <span>0</span>) {<br />          pendingToBeMerged.wait()<span>;<br /></span>        }<br /><span>        // Pickup the inputs to merge.<br /></span>        inputs = pendingToBeMerged.removeFirst()<span>;<br /></span>      }<br /><br /><span>      // Merge<br /></span>      <b>merge(inputs)<span>;<br /></span> </b>   } <span>catch </span>(InterruptedException ie) {<br />      numPending.set(<span>0</span>)<span>;<br /></span><span>      return;<br /></span>    } <span>catch</span>(Throwable t) {<br />      numPending.set(<span>0</span>)<span>;<br /></span>      reporter.reportException(t)<span>;<br /></span><span>      return;<br /></span>    } <span>finally </span>{<br /><span>      synchronized </span>(<span>this</span>) {<br />        numPending.decrementAndGet()<span>;<br /></span>        notifyAll()<span>;<br /></span>      }<br />    }<br />  }<br />}</pre></pre></pre></pre></div></div></foreignObject><text x="187" y="251" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 2330 1449 L 2825.84 73.99" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2827.62 69.05 L 2828.54 76.82 L 2825.84 73.99 L 2821.95 74.45 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2320 1489 L 2826.72 645.46" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2829.42 640.96 L 2828.82 648.76 L 2826.72 645.46 L 2822.82 645.16 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2830 475 L 2332.92 1439.34" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2330.51 1444.01 L 2330.61 1436.18 L 2332.92 1439.34 L 2336.83 1439.39 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2830 1049 L 2324.82 1484.84" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2320.85 1488.27 L 2323.86 1481.05 L 2324.82 1484.84 L 2328.43 1486.35 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2830" y="579" width="450" height="490" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(2835.5,569.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="374" height="490" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 498px; max-width: 438px; width: 375px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeThread.java</h1><pre><pre><pre><pre><span>public void </span>run() {<br /><span>  while </span>(<span>true</span>) {<br />    List&lt;T&gt; inputs = <span>null;<br /></span><span>    try </span>{<br /><span>      // Wait for notification to start the merge...<br /></span><span>      synchronized </span>(pendingToBeMerged) {<br /><span>        while</span>(pendingToBeMerged.size() &lt;= <span>0</span>) {<br />          pendingToBeMerged.wait()<span>;<br /></span>        }<br /><span>        // Pickup the inputs to merge.<br /></span>        inputs = pendingToBeMerged.removeFirst()<span>;<br /></span>      }<br /><br /><span>      // Merge<br /></span>      <b>merge(inputs)</b><span><b>;</b><br /></span>    } <span>catch </span>(InterruptedException ie) {<br />      numPending.set(<span>0</span>)<span>;<br /></span><span>      return;<br /></span>    } <span>catch</span>(Throwable t) {<br />      numPending.set(<span>0</span>)<span>;<br /></span>      reporter.reportException(t)<span>;<br /></span><span>      return;<br /></span>    } <span>finally </span>{<br /><span>      synchronized </span>(<span>this</span>) {<br />        numPending.decrementAndGet()<span>;<br /></span>        notifyAll()<span>;<br /></span>      }<br />    }<br />  }<br />}</pre></pre></pre></pre></div></div></foreignObject><text x="187" y="251" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="3500" y="9" width="660" height="1180" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(3505.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="648" height="1188" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1188px; max-width: 648px; width: 648px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><pre><span>private class </span>InMemoryMerger <span>extends </span>MergeThread&lt;InMemoryMapOutput&lt;K<span>,</span>V&gt;<span>, </span>K<span>,</span>V&gt; {<br /><br /><span>  public </span>InMemoryMerger(MergeManagerImpl&lt;K<span>, </span>V&gt; manager) {<br /><span>    super</span>(manager<span>, </span>Integer.MAX_VALUE<span>, </span>exceptionReporter)<span>;<br /></span>    setName<br />    (<span>"InMemoryMerger - Thread to merge in-memory shuffled map-outputs"</span>)<span>;<br /></span>    setDaemon(<span>true</span>)<span>;<br /></span>}<br /><br />  @Override<br /><span>  public void </span>merge(List&lt;InMemoryMapOutput&lt;K<span>,</span>V&gt;&gt; inputs) <span>throws </span>IOException {<br /><span>    if </span>(inputs == <span>null </span>|| inputs.size() == <span>0</span>) {<br /><span>      return;<br /></span>    }<br /><br /><span>    //name this output file same as the name of the first file that is <br /></span><span>    //there in the current list of inmem files (this is guaranteed to<br /></span><span>    //be absent on the disk currently. So we don't overwrite a prev. <br /></span><span>    //created spill). Also we need to create the output file now since<br /></span><span>    //it is not guaranteed that this file will be present after merge<br /></span><span>    //is called (we delete empty files as soon as we see them<br /></span><span>    //in the merge method)<br /></span><span><br /></span><span>    //figure out the mapId <br /></span>    TaskAttemptID mapId = inputs.get(<span>0</span>).getMapId()<span>;<br /></span>    TaskID mapTaskId = mapId.getTaskID()<span>;<br /></span><span><br /></span>    List&lt;Segment&lt;K<span>, </span>V&gt;&gt; inMemorySegments = <span>new </span>ArrayList&lt;Segment&lt;K<span>, </span>V&gt;&gt;()<span>;<br /></span><span>    long </span>mergeOutputSize = createInMemorySegments(inputs<span>, </span>inMemorySegments<span>,</span><span>0</span>)<span>;<br /></span><span>    int </span>noInMemorySegments = inMemorySegments.size()<span>;<br /></span><span><br /></span>    Path outputPath = mapOutputFile.getInputFileForWrite(mapTaskId<span>,<br /></span>                    mergeOutputSize).suffix(<br />                                     Task.MERGED_OUTPUT_PREFIX)<span>;<br /></span><span><br /></span>    FSDataOutputStream out = CryptoUtils.wrapIfNecessary(jobConf<span>, </span>rfs.create(outputPath))<span>;<br /></span>    Writer&lt;K<span>, </span>V&gt; writer = <span>new </span>Writer&lt;K<span>, </span>V&gt;(jobConf<span>, </span>out<span>,<br /></span>      (Class&lt;K&gt;) jobConf.getMapOutputKeyClass()<span>,<br /></span>      (Class&lt;V&gt;) jobConf.getMapOutputValueClass()<span>, </span>codec<span>, null, true</span>)<span>;<br /></span><span><br /></span>    RawKeyValueIterator rIter = <span>null;<br /></span>    CompressAwarePath compressAwarePath<span>;<br /></span><span>    try </span>{<br />      LOG.info(<span>"Initiating in-memory merge with " </span>+ noInMemorySegments + <br /><span>               " segments..."</span>)<span>;<br /></span><span><br /></span>      rIter = <b>Merger.merge(jobConf<span>, </span>rfs<span>,<br /></span>                          (Class&lt;K&gt;)jobConf.getMapOutputKeyClass()<span>,<br /></span>                          (Class&lt;V&gt;)jobConf.getMapOutputValueClass()<span>,<br /></span>                           inMemorySegments<span>, </span>inMemorySegments.size()<span>,<br /></span><span>                           new </span>Path(reduceId.toString())<span>,<br /></span>                          (RawComparator&lt;K&gt;)jobConf.getOutputKeyComparator()<span>,<br /></span>                           reporter<span>, </span>spilledRecordsCounter<span>, null, null</span>)</b><span><b>;</b><br /></span><span><br /></span><span>      if </span>(<span>null </span>== combinerClass) {<br />        Merger.writeFile(rIter<span>, </span>writer<span>, </span>reporter<span>, </span>jobConf)<span>;<br /></span>      } <span>else </span>{<br />        combineCollector.setWriter(writer)<span>;<br /></span>        combineAndSpill(rIter<span>, </span>reduceCombineInputCounter)<span>;<br /></span>      }<br />      writer.close()<span>;<br /></span>      compressAwarePath = <span>new </span>CompressAwarePath(outputPath<span>,<br /></span>      writer.getRawLength()<span>, </span>writer.getCompressedLength())<span>;<br /></span><span><br /></span>      LOG.info(reduceId +  <br /><span>               " Merge of the " </span>+ noInMemorySegments +<br /><span>               " files in-memory complete." </span>+<br /><span>               " Local file is " </span>+ outputPath + <span>" of size " </span>+ <br />               localFS.getFileStatus(outputPath).getLen())<span>;<br /></span>    } <span>catch </span>(IOException e) { <br /><span>      //make sure that we delete the ondisk file that we created <br /></span><span>      //earlier when we invoked cloneFileAttributes<br /></span>      localFS.delete(outputPath<span>, true</span>)<span>;<br /></span><span>      throw </span>e<span>;<br /></span>    }<br /><br /><span>    // Note the output of the merge<br /></span>    closeOnDiskFile(compressAwarePath)<span>;<br /></span>  }<br />}</pre></pre></pre></pre></div></div></foreignObject><text x="324" y="600" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 2980 259 L 3497 206" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="3500" y="1219" width="660" height="1100" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(3505.5,1209.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="648" height="1106" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1108px; max-width: 648px; width: 648px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><pre><pre><span>private class </span>OnDiskMerger <span>extends </span>MergeThread&lt;CompressAwarePath<span>,</span>K<span>,</span>V&gt; {<br /><br /><span>  public </span>OnDiskMerger(MergeManagerImpl&lt;K<span>, </span>V&gt; manager) {<br /><span>    super</span>(manager<span>, </span>ioSortFactor<span>, </span>exceptionReporter)<span>;<br /></span>    setName(<span>"OnDiskMerger - Thread to merge on-disk map-outputs"</span>)<span>;<br /></span>    setDaemon(<span>true</span>)<span>;<br /></span>  }<br /><br />  @Override<br /><span>  public void </span>merge(List&lt;CompressAwarePath&gt; inputs) <span>throws </span>IOException {<br /><span>    // sanity check<br /></span><span>    if </span>(inputs == <span>null </span>|| inputs.isEmpty()) {<br />      LOG.info(<span>"No ondisk files to merge..."</span>)<span>;<br /></span><span>      return;<br /></span>    }<br /><br /><span>    long </span>approxOutputSize = <span>0</span><span>;<br /></span><span>    int </span>bytesPerSum = <br />      jobConf.getInt(<span>"io.bytes.per.checksum"</span><span>, </span><span>512</span>)<span>;<br /></span><span><br /></span>    LOG.info(<span>"OnDiskMerger: We have  " </span>+ inputs.size() + <br /><span>             " map outputs on disk. Triggering merge..."</span>)<span>;<br /></span><span><br /></span><span>    // 1. Prepare the list of files to be merged. <br /></span><span>    for </span>(CompressAwarePath file : inputs) {<br />      approxOutputSize += localFS.getFileStatus(file).getLen()<span>;<br /></span>    }<br /><br /><span>    // add the checksum length<br /></span>    approxOutputSize += <br />      ChecksumFileSystem.getChecksumLength(approxOutputSize<span>, </span>bytesPerSum)<span>;<br /></span><span><br /></span><span>    // 2. Start the on-disk merge process<br /></span>    Path outputPath = <br />      localDirAllocator.getLocalPathForWrite(inputs.get(<span>0</span>).toString()<span>, <br /></span>        approxOutputSize<span>, </span>jobConf).suffix(Task.MERGED_OUTPUT_PREFIX)<span>;<br /></span><span><br /></span>    FSDataOutputStream out = CryptoUtils.wrapIfNecessary(jobConf<span>, </span>rfs.create(outputPath))<span>;<br /></span>    Writer&lt;K<span>, </span>V&gt; writer = <span>new </span>Writer&lt;K<span>, </span>V&gt;(jobConf<span>, </span>out<span>,<br /></span>                         (Class&lt;K&gt;) jobConf.getMapOutputKeyClass()<span>,<br /></span>                         (Class&lt;V&gt;) jobConf.getMapOutputValueClass()<span>, </span>codec<span>, null, true</span>)<span>;<br /></span><span><br /></span>    RawKeyValueIterator iter  = <span>null;<br /></span>    CompressAwarePath compressAwarePath<span>;<br /></span>    Path tmpDir = <span>new </span>Path(reduceId.toString())<span>;<br /></span><span>    try </span>{<br />      iter = <b>Merger.merge(jobConf<span>, </span>rfs<span>,<br /></span>                         (Class&lt;K&gt;) jobConf.getMapOutputKeyClass()<span>,<br /></span>                         (Class&lt;V&gt;) jobConf.getMapOutputValueClass()<span>,<br /></span>                          codec<span>, </span>inputs.toArray(<span>new </span>Path[inputs.size()])<span>, <br /></span><span>                          true, </span>ioSortFactor<span>, </span>tmpDir<span>, <br /></span>                         (RawComparator&lt;K&gt;) jobConf.getOutputKeyComparator()<span>, <br /></span>                         reporter<span>, </span>spilledRecordsCounter<span>, null, <br /></span>                         mergedMapOutputsCounter<span>, null</span>)</b><span><b>;</b><br /></span><span><br /></span>      Merger.writeFile(iter<span>, </span>writer<span>, </span>reporter<span>, </span>jobConf)<span>;<br /></span>      writer.close()<span>;<br /></span>      compressAwarePath = <span>new </span>CompressAwarePath(outputPath<span>,   <br /></span>      writer.getRawLength()<span>, </span>writer.getCompressedLength())<span>;<br /></span>    } <span>catch </span>(IOException e) {<br />      localFS.delete(outputPath<span>, true</span>)<span>;<br /></span><span>      throw </span>e<span>;<br /></span>    }<br /><br />    closeOnDiskFile(compressAwarePath)<span>;<br /></span><span><br /></span>    LOG.info(reduceId +<br /><span>             " Finished merging " </span>+ inputs.size() + <br /><span>             " map output files on disk of total-size " </span>+ <br />             approxOutputSize + <span>"." </span>+ <br /><span>             " Local output file is " </span>+ outputPath + <span>" of size " </span>+<br />             localFS.getFileStatus(outputPath).getLen())<span>;<br /></span>  }<br />}</pre></pre></pre></pre></pre></div></div></foreignObject><text x="324" y="559" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 2980 839 L 3495 1401" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="790" y="459" width="620" height="1170" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(795.5,449.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="598" height="1176" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1178px; max-width: 608px; width: 599px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Shuffle.java</h1><pre>@Override<br /><span>public </span>RawKeyValueIterator run() <span>throws </span>IOException<span>, </span>InterruptedException {<br /><span>  // Scale the maximum events we fetch per RPC call to mitigate OOM issues<br /></span><span>  // on the ApplicationMaster when a thundering herd of reducers fetch events<br /></span><span>  // TODO: This should not be necessary after HADOOP-8942<br /></span><span>  int </span>eventsPerReducer = Math.max(MIN_EVENTS_TO_FETCH<span>,<br /></span>  MAX_RPC_OUTSTANDING_EVENTS / jobConf.getNumReduceTasks())<span>;<br /></span><span>  int </span>maxEventsToFetch = Math.min(MAX_EVENTS_TO_FETCH<span>, </span>eventsPerReducer)<span>;<br /></span><span><br /></span><span>  // Start the map-completion events fetcher thread<br /></span><span>  final </span>EventFetcher&lt;K<span>, </span>V&gt; eventFetcher =<br /><span>       new </span>EventFetcher&lt;K<span>, </span>V&gt;(reduceId<span>, </span>umbilical<span>, </span>scheduler<span>, this,<br /></span>       maxEventsToFetch)<span>;<br /></span>  eventFetcher.start()<span>;<br /></span><span><br /></span><span>  // Start the map-output fetcher threads<br /></span><span>  boolean </span>isLocal = localMapFiles != <span>null;<br /></span><span>  final int </span>numFetchers = isLocal ? <span>1 </span>:<br />      jobConf.getInt(MRJobConfig.SHUFFLE_PARALLEL_COPIES<span>, </span><span>5</span>)<span>;<br /></span>  Fetcher&lt;K<span>, </span>V&gt;[] fetchers = <span>new </span>Fetcher[numFetchers]<span>;<br /></span><span>  if </span>(isLocal) {<br />    fetchers[<span>0</span>] = <span>new </span>LocalFetcher&lt;K<span>, </span>V&gt;(jobConf<span>, </span>reduceId<span>, </span>scheduler<span>,<br /></span>                    merger<span>, </span>reporter<span>, </span>metrics<span>, this, </span>reduceTask.getShuffleSecret()<span>,<br /></span>                    localMapFiles)<span>;<br /></span><b>    fetchers[<span>0</span>].start()<span>;<br /></span></b>  } <span>else </span>{<br /><span>    for </span>(<span>int </span>i=<span>0</span><span>; </span>i &lt; numFetchers<span>; </span>++i) {<br />      fetchers[i] = <span>new </span>Fetcher&lt;K<span>, </span>V&gt;(jobConf<span>, </span>reduceId<span>, </span>scheduler<span>, </span>merger<span>,<br /></span>                                     reporter<span>, </span>metrics<span>, this, <br /></span>                                     reduceTask.getShuffleSecret())<span>;<br /></span><b>      fetchers[i].start()<span>;<br /></span></b>    }<br />  }<br /><br /><span>  // Wait for shuffle to complete successfully<br /></span><span>  while </span>(!scheduler.waitUntilDone(PROGRESS_FREQUENCY)) {<br />    reporter.progress()<span>;<br /></span><span><br /></span><span>    synchronized </span>(<span>this</span>) {<br /><span>      if </span>(throwable != <span>null</span>) {<br /><span>        throw new </span>ShuffleError(<span>"error in shuffle in " </span>+ throwingThreadName<span>,<br /></span>                               throwable)<span>;<br /></span>      }<br />    }<br />  }<br /><br /><span>  // Stop the event-fetcher thread<br /></span>  eventFetcher.shutDown()<span>;<br /></span><span><br /></span><span>  // Stop the map-output fetcher threads<br /></span><span>  for </span>(Fetcher&lt;K<span>, </span>V&gt; fetcher : fetchers) {<br />    fetcher.shutDown()<span>;<br /></span>  }<br /><br /><span>  // stop the scheduler<br /></span>  scheduler.close()<span>;<br /></span><span><br /></span>  copyPhase.complete()<span>; </span><span>// copy is already complete<br /></span>  taskStatus.setPhase(TaskStatus.Phase.SORT)<span>;<br /></span>  reduceTask.statusUpdate(umbilical)<span>;<br /></span><span><br /></span><span>  // Finish the on-going merges...<br /></span>  RawKeyValueIterator kvIter = <span>null;<br /></span><span>  try </span>{<br />    kvIter = merger.close()<span>;<br /></span>  } <span>catch </span>(Throwable e) {<br /><span>    throw new </span>ShuffleError(<span>"Error while doing final merge "</span><span>, </span>e)<span>;<br /></span>  }<br /><br /><span>  // Sanity check<br /></span><span>  synchronized </span>(<span>this</span>) {<br /><span>    if </span>(throwable != <span>null</span>) {<br /><span>      throw new </span>ShuffleError(<span>"error in shuffle in " </span>+ throwingThreadName<span>,<br /></span>                           throwable)<span>;<br /></span>    }<br />  }<br /><br /><span>  return </span>kvIter<span>;<br /></span>}</pre></div></div></foreignObject><text x="299" y="594" fill="#333333" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 789 1603 L 283.84 934.08" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 280.67 929.89 L 287.69 933.37 L 283.84 934.08 L 282.1 937.59 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 290 919 L 779 532.95" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 783.12 529.69 L 779.8 536.78 L 779 532.95 L 775.46 531.28 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><rect x="1500" y="459" width="430" height="370" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(1505.5,449.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="410" height="378" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 378px; max-width: 418px; width: 411px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>LocalFetcher.java</h1><pre><pre><span>public void </span>run() {<br /><span>  // Create a worklist of task attempts to work over.<br /></span>  Set&lt;TaskAttemptID&gt; maps = <span>new </span>HashSet&lt;TaskAttemptID&gt;()<span>;<br /></span><span>  for </span>(TaskAttemptID map : localMapFiles.keySet()) {<br />    maps.add(map)<span>;<br /></span>  }<br /><br /><span>  while </span>(maps.size() &gt; <span>0</span>) {<br /><span>    try </span>{<br /><span>      // If merge is on, block<br /></span><b>      merger.waitForResource()<span>;<br /></span></b>      metrics.threadBusy()<span>;<br /></span><span><br /></span><span>      // Copy as much as is possible.<br /></span>      doCopy(maps)<span>;<br /></span>      metrics.threadFree()<span>;<br /></span>    } <span>catch </span>(InterruptedException ie) {<br />    } <span>catch </span>(Throwable t) {<br />      exceptionReporter.reportException(t)<span>;<br /></span>    }<br />  }<br />}</pre></pre></div></div></foreignObject><text x="205" y="195" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="1500" y="889" width="490" height="440" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(1505.5,879.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="468" height="448" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 448px; max-width: 478px; width: 469px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Fetcher.java</h1><pre><pre><pre><span>public void </span>run() {<br /><span>  try </span>{<br /><span>    while </span>(!stopped &amp;&amp; !Thread.currentThread().isInterrupted()) {<br />      MapHost host = <span>null;<br /></span><span>      try </span>{<br /><span>        // If merge is on, block<br /></span><b>        merger.waitForResource()<span>;<br /></span></b><span><br /></span><span>        // Get a host to shuffle from<br /></span><b>        host = scheduler.getHost()<span>;<br /></span></b>        metrics.threadBusy()<span>;<br /></span><span><br /></span><span>        // Shuffle<br /></span>        copyFromHost(host)<span>;<br /></span>      } <span>finally </span>{<br /><span>        if </span>(host != <span>null</span>) {<br />          scheduler.freeHost(host)<span>;<br /></span>          metrics.threadFree()<span>;            <br /></span>        }<br />      }<br />    }<br />  } <span>catch </span>(InterruptedException ie) {<br /><span>    return;<br /></span>  } <span>catch </span>(Throwable t) {<br />    exceptionReporter.reportException(t)<span>;<br /></span>  }<br />}<br /></pre></pre></pre></div></div></foreignObject><text x="234" y="230" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 980 849 L 1492.64 520.44" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1497.06 517.6 L 1493.05 524.33 L 1492.64 520.44 L 1489.28 518.43 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 990 939 L 1490.63 945.91" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1495.88 945.98 L 1488.83 949.39 L 1490.63 945.91 L 1488.93 942.39 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1495 1310 L 995.13 942.77" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 990.9 939.66 L 998.61 940.99 L 995.13 942.77 L 994.47 946.63 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 1495 809 L 986.34 858.38" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 981.11 858.89 L 987.74 854.73 L 986.34 858.38 L 988.42 861.7 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/></g></svg>