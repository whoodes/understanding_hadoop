<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="5482px" height="4301px" viewBox="-0.5 -0.5 5482 4301" content="&lt;mxfile modified=&quot;2019-06-29T00:24:35.744Z&quot; host=&quot;www.draw.io&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot; version=&quot;10.8.3&quot; etag=&quot;EVU5ZAqWasnDyk_Voy6f&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;wb7UtgkJbHnFSIjihnlT&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><rect x="0" y="10" width="730" height="1230" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(4.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="713" height="1239" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1239px; max-width: 719px; width: 714px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>ReduceTask.java</h1><pre>@Override<br />@SuppressWarnings(<span>"unchecked"</span>)<br /><span>public void </span>run(JobConf job<span>, final </span>TaskUmbilicalProtocol umbilical)<br /><span>throws </span>IOException<span>, </span>InterruptedException<span>, </span>ClassNotFoundException {<br />  job.setBoolean(JobContext.SKIP_RECORDS<span>, </span>isSkipping())<span>;<br /></span><span><br /></span><span>  if </span>(isMapOrReduce()) {<br />    copyPhase = getProgress().addPhase(<span>"copy"</span>)<span>;<br /></span>    sortPhase  = getProgress().addPhase(<span>"sort"</span>)<span>;<br /></span>    reducePhase = getProgress().addPhase(<span>"reduce"</span>)<span>;<br /></span>  }</pre><pre><br /><span>  // start thread that will handle communication with parent<br /></span>  TaskReporter reporter = startReporter(umbilical)<span>;<br /></span><span><br /></span><span>  boolean </span>useNewApi = job.getUseNewReducer()<span>;<br /></span>  initialize(job<span>, </span>getJobID()<span>, </span>reporter<span>, </span>useNewApi)<span>;<br /></span><span><br /></span><span>  // check if it is a cleanupJobTask<br /></span><span>  if </span>(jobCleanup) {<br />    runJobCleanupTask(umbilical<span>, </span>reporter)<span>;<br /></span><span>    return;<br /></span>  }<br /><span>  if </span>(jobSetup) {<br />    runJobSetupTask(umbilical<span>, </span>reporter)<span>;<br /></span><span>    return;<br /></span>  }<br /><span>  if </span>(taskCleanup) {<br />    runTaskCleanupTask(umbilical<span>, </span>reporter)<span>;<br /></span><span>    return;<br /></span>  }<br /><br /><span>  // Initialize the codec<br /></span>  codec = initCodec()<span>;<br /></span>  RawKeyValueIterator rIter = <span>null;<br /></span>  ShuffleConsumerPlugin shuffleConsumerPlugin = <span>null;<br /></span><span><br /></span>  Class combinerClass = conf.getCombinerClass()<span>;<br /></span>  CombineOutputCollector combineCollector = <br />    (<span>null </span>!= combinerClass) ? <br /><span>    new </span>CombineOutputCollector(reduceCombineOutputCounter<span>, </span>reporter<span>, </span>conf) : <span>null;<br /></span><span><br /></span>  Class&lt;? <span>extends </span>ShuffleConsumerPlugin&gt; clazz =<br />        job.getClass(MRConfig.SHUFFLE_CONSUMER_PLUGIN<span>, </span>Shuffle.<span>class, </span>ShuffleConsumerPlugin.<span>class</span>)<span>;<br /></span><span><br /></span>  shuffleConsumerPlugin = ReflectionUtils.newInstance(clazz<span>, </span>job)<span>;<br /></span>  LOG.info(<span>"Using ShuffleConsumerPlugin: " </span>+ shuffleConsumerPlugin)<span>;<br /></span><span><br /></span>  ShuffleConsumerPlugin.Context shuffleContext = <br /><span>  new </span>ShuffleConsumerPlugin.Context(getTaskID()<span>, </span>job<span>, </span>FileSystem.getLocal(job)<span>, </span>umbilical<span>, <br /></span><span>                super</span>.lDirAlloc<span>, </span>reporter<span>, </span>codec<span>, <br /></span>                combinerClass<span>, </span>combineCollector<span>, <br /></span>                spilledRecordsCounter<span>, </span>reduceCombineInputCounter<span>,<br /></span>                shuffledMapsCounter<span>,<br /></span>                reduceShuffleBytes<span>, </span>failedShuffleCounter<span>,<br /></span>                mergedMapOutputsCounter<span>,<br /></span>                taskStatus<span>, </span>copyPhase<span>, </span>sortPhase<span>, this,<br /></span>                mapOutputFile<span>, </span>localMapFiles)<span>;<br /></span><b><font color="#000000">  shuffleConsumerPlugin.init(shuffleContext);<br /></font></b><span><br /></span><b>  rIter = shuffleConsumerPlugin.run()<span>;<br /></span></b><span><br /></span><span>  // free up the data structures<br /></span>  mapOutputFilesOnDisk.clear()<span>;<br /></span><span><br /></span>  sortPhase.complete()<span>;                         </span><span>// sort is complete<br /></span>  setPhase(TaskStatus.Phase.REDUCE)<span>; <br /></span>  statusUpdate(umbilical)<span>;<br /></span>  Class keyClass = job.getMapOutputKeyClass()<span>;<br /></span>  Class valueClass = job.getMapOutputValueClass()<span>;<br /></span>  RawComparator comparator = job.getOutputValueGroupingComparator()<span>;<br /></span><span><br /></span><span>  if </span>(useNewApi) {<br />    runNewReducer(job<span>, </span>umbilical<span>, </span>reporter<span>, </span>rIter<span>, </span>comparator<span>, <br /></span>    keyClass<span>, </span>valueClass)<span>;<br /></span>  } <span>else </span>{<br />    runOldReducer(job<span>, </span>umbilical<span>, </span>reporter<span>, </span>rIter<span>, </span>comparator<span>,  <br /></span>  keyClass<span>, </span>valueClass)<span>;<br /></span>  }<br /><br />  shuffleConsumerPlugin.close()<span>;<br /></span>  done(umbilical<span>, </span>reporter)<span>;</span><span><br /></span>}</pre></div></div></foreignObject><text x="357" y="625" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><rect x="790" y="70" width="560" height="370" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(794.5,59.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="540" height="350" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 379px; max-width: 549px; width: 541px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Shuffle.java</h1><pre>@Override<br /><span>public void </span>init(ShuffleConsumerPlugin.Context context) {<br /><span>  this</span>.context = context<span>;<br /></span><span><br /></span><span>  this</span>.reduceId = context.getReduceId()<span>;<br /></span><span>  this</span>.jobConf = context.getJobConf()<span>;<br /></span><span>  this</span>.umbilical = context.getUmbilical()<span>;<br /></span><span>  this</span>.reporter = context.getReporter()<span>;<br /></span><span>  this</span>.metrics = ShuffleClientMetrics.create(context.getReduceId()<span>,<br /></span><span>      this</span>.jobConf)<span>;<br /></span><span>  this</span>.copyPhase = context.getCopyPhase()<span>;<br /></span><span>  this</span>.taskStatus = context.getStatus()<span>;<br /></span><span>  this</span>.reduceTask = context.getReduceTask()<span>;<br /></span><span>  this</span>.localMapFiles = context.getLocalMapFiles()<span>;<br /></span><span><br /></span>  scheduler = <span>new </span>ShuffleSchedulerImpl&lt;K<span>, </span>V&gt;(jobConf<span>, </span>taskStatus<span>, </span>reduceId<span>,<br /></span><span>      this, </span>copyPhase<span>, </span>context.getShuffledMapsCounter()<span>,<br /></span>      context.getReduceShuffleBytes()<span>, </span>context.getFailedShuffleCounter())<span>;<br /></span><b>  merger = createMergeManager(context)<span>;<br /></span></b>}</pre></div></div></foreignObject><text x="270" y="181" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 330 889 L 784.1 149.71" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 786.84 145.24 L 786.16 153.03 L 784.1 149.71 L 780.2 149.37 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 791.71 401.43 L 334.37 885.37" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 330.77 889.19 L 333.03 881.7 L 334.37 885.37 L 338.12 886.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="1450" y="145" width="560" height="220" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(1454.5,134.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="547" height="210" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 229px; max-width: 549px; width: 548px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Shuffle.java</h1><pre><pre>protected MergeManager&lt;K, V&gt; createMergeManager(<br />    ShuffleConsumerPlugin.Context context) {<br />  return <b>new </b><b>MergeManagerImpl&lt;K<span>, </span>V&gt;(reduceId<span>, </span>jobConf<span>, </span>context.getLocalFS()<span>,<br /></span>    context.getLocalDirAllocator()<span>, </span>reporter<span>, </span>context.getCodec()<span>,<br /></span>    context.getCombinerClass()<span>, </span>context.getCombineCollector()<span>, <br /></span>    context.getSpilledRecordsCounter()<span>,<br /></span>    context.getReduceCombineInputCounter()<span>,<br /></span>    context.getMergedMapOutputsCounter()<span>, this, </span>context.getMergePhase()<span>,<br /></span>    context.getMapOutputFile())</b><b>;</b><br />}</pre></pre></div></div></foreignObject><text x="274" y="111" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 1080.29 380 L 1444.56 202.79" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1449.28 200.49 L 1444.52 206.7 L 1444.56 202.79 L 1441.45 200.4 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1447.43 338.57 L 1086.31 389.12" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 1081.11 389.85 L 1087.55 385.41 L 1086.31 389.12 L 1088.52 392.34 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2110" y="10" width="620" height="1560" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(2114.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="562" height="1552" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1569px; max-width: 609px; width: 563px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><span>public </span>MergeManagerImpl(TaskAttemptID reduceId<span>, </span>JobConf jobConf<span>, <br /></span>            FileSystem localFS<span>,<br /></span>            LocalDirAllocator localDirAllocator<span>,  <br /></span>            Reporter reporter<span>,<br /></span>            CompressionCodec codec<span>,<br /></span>            Class&lt;? <span>extends </span>Reducer&gt; combinerClass<span>,<br /></span>            CombineOutputCollector&lt;K<span>,</span>V&gt; combineCollector<span>,<br /></span>            Counters.Counter spilledRecordsCounter<span>,<br /></span>            Counters.Counter reduceCombineInputCounter<span>,<br /></span>            Counters.Counter mergedMapOutputsCounter<span>,<br /></span>            ExceptionReporter exceptionReporter<span>,<br /></span>            Progress mergePhase<span>, </span>MapOutputFile mapOutputFile) {<br /><span>  this</span>.reduceId = reduceId<span>;<br /></span><span>  this</span>.jobConf = jobConf<span>;<br /></span><span>  this</span>.localDirAllocator = localDirAllocator<span>;<br /></span><span>  this</span>.exceptionReporter = exceptionReporter<span>;<br /></span><span><br /></span><span>  this</span>.reporter = reporter<span>;<br /></span><span>  this</span>.codec = codec<span>;<br /></span><span>  this</span>.combinerClass = combinerClass<span>;<br /></span><span>  this</span>.combineCollector = combineCollector<span>;<br /></span><span>  this</span>.reduceCombineInputCounter = reduceCombineInputCounter<span>;<br /></span><span>  this</span>.spilledRecordsCounter = spilledRecordsCounter<span>;<br /></span><span>  this</span>.mergedMapOutputsCounter = mergedMapOutputsCounter<span>;<br /></span><span>  this</span>.mapOutputFile = mapOutputFile<span>;<br /></span><span>  this</span>.mapOutputFile.setConf(jobConf)<span>;<br /></span><span><br /></span><span>  this</span>.localFS = localFS<span>;<br /></span><span>  this</span>.rfs = ((LocalFileSystem)localFS).getRaw()<span>;<br /></span><span><br /></span><span>  final float </span>maxInMemCopyUse =<br />    jobConf.getFloat(MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT<span>,<br /></span>      MRJobConfig.DEFAULT_SHUFFLE_INPUT_BUFFER_PERCENT)<span>;<br /></span><span>  if </span>(maxInMemCopyUse &gt; <span>1.0 </span>|| maxInMemCopyUse &lt; <span>0.0</span>) {<br /><span>    throw new </span>IllegalArgumentException(<span>"Invalid value for " </span>+<br />        MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT + <span>": " </span>+<br />        maxInMemCopyUse)<span>;<br /></span>  }<br /><br /><span>  // Allow unit tests to fix Runtime memory<br /></span><span>  this</span>.memoryLimit = (<span>long</span>)(jobConf.getLong(<br />      MRJobConfig.REDUCE_MEMORY_TOTAL_BYTES<span>,<br /></span>      Runtime.getRuntime().maxMemory()) * maxInMemCopyUse)<span>;</span></pre><pre><span><br /></span><span>  this</span>.ioSortFactor = jobConf.getInt(MRJobConfig.IO_SORT_FACTOR<span>,<br /></span>    MRJobConfig.DEFAULT_IO_SORT_FACTOR)<span>;<br /></span><span><br /></span><span>  final float </span>singleShuffleMemoryLimitPercent =<br />      jobConf.getFloat(MRJobConfig.SHUFFLE_MEMORY_LIMIT_PERCENT<span>,<br /></span>      DEFAULT_SHUFFLE_MEMORY_LIMIT_PERCENT)<span>;<br /></span><span>  if </span>(singleShuffleMemoryLimitPercent &lt; <span>0.0f<br /></span>    || singleShuffleMemoryLimitPercent &gt; <span>1.0f</span>) {<br /><span>       throw new </span>IllegalArgumentException(<span>"Invalid value for "<br /></span>         + MRJobConfig.SHUFFLE_MEMORY_LIMIT_PERCENT + <span>": "<br /></span>         + singleShuffleMemoryLimitPercent)<span>;<br /></span>  }<br /><br />  usedMemory = <span>0L</span><span>;<br /></span>  commitMemory = <span>0L</span><span>;<br /></span><span>  long </span>maxSingleShuffleLimitConfiged =<br />      (<span>long</span>)(memoryLimit * singleShuffleMemoryLimitPercent)<span>;<br /></span><span>  if</span>(maxSingleShuffleLimitConfiged &gt; Integer.MAX_VALUE) {<br />    maxSingleShuffleLimitConfiged = Integer.MAX_VALUE<span>;<br /></span>    LOG.info(<span>"The max number of bytes for a single in-memory shuffle cannot" </span>+<br /><span>      " be larger than Integer.MAX_VALUE. Setting it to Integer.MAX_VALUE"</span>)<span>;<br /></span>  }<br /><span>  this</span>.maxSingleShuffleLimit = maxSingleShuffleLimitConfiged<span>;<br /></span><span>  this</span>.memToMemMergeOutputsThreshold =<br />      jobConf.getInt(MRJobConfig.REDUCE_MEMTOMEM_THRESHOLD<span>, </span>ioSortFactor)<span>;<br /></span><span>  this</span>.mergeThreshold = (<span>long</span>)(<span>this</span>.memoryLimit * <br />                        jobConf.getFloat(<br />                          MRJobConfig.SHUFFLE_MERGE_PERCENT<span>,<br /></span>                          MRJobConfig.DEFAULT_SHUFFLE_MERGE_PERCENT))<span>;<br /></span>  LOG.info(<span>"MergerManager: memoryLimit=" </span>+ memoryLimit + <span>", " </span>+<br /><span>           "maxSingleShuffleLimit=" </span>+ maxSingleShuffleLimit + <span>", " </span>+<br /><span>           "mergeThreshold=" </span>+ mergeThreshold + <span>", " </span>+ <br /><span>           "ioSortFactor=" </span>+ ioSortFactor + <span>", " </span>+<br /><span>           "memToMemMergeOutputsThreshold=" </span>+ memToMemMergeOutputsThreshold)<span>;<br /></span><span><br /></span><span>  if </span>(<span>this</span>.maxSingleShuffleLimit &gt;= <span>this</span>.mergeThreshold) {<br /><span>    throw new </span>RuntimeException(<span>"Invalid configuration: "<br /></span>      + <span>"maxSingleShuffleLimit should be less than mergeThreshold "<br /></span>      + <span>"maxSingleShuffleLimit: " </span>+ <span>this</span>.maxSingleShuffleLimit<br />      + <span>"mergeThreshold: " </span>+ <span>this</span>.mergeThreshold)<span>;<br /></span>  }<br /><br /><span>  boolean </span>allowMemToMemMerge = <br />    jobConf.getBoolean(MRJobConfig.REDUCE_MEMTOMEM_ENABLED<span>, false</span>)<span>;<br /></span><span>    if </span>(allowMemToMemMerge) {<br /><span>      this</span>.memToMemMerger = <br /><span>        new </span>IntermediateMemoryToMemoryMerger(<span>this,<br /></span>                                             memToMemMergeOutputsThreshold)<span>;<br /></span><span>      this</span>.memToMemMerger.start()<span>;<br /></span>  } <span>else </span>{<br /><span>    this</span>.memToMemMerger = <span>null;<br /></span>  }<br /><br /><span>  this</span>.inMemoryMerger = createInMemoryMerger()<span>;<br /></span><b><span>  this</span>.inMemoryMerger.start()<span>;<br /></span></b><span><br /></span><span>  this</span>.onDiskMerger = <span>new </span>OnDiskMerger(<span>this</span>)<span>;<br /></span><b><span>  this</span>.onDiskMerger.start()<span>;<br /></span></b><span><br /></span><span>  this</span>.mergePhase = mergePhase<span>;<br /></span>}</pre></pre></pre></div></div></foreignObject><text x="281" y="782" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 2010.29 230 L 2105.58 71.17" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2108.28 66.67 L 2107.68 74.48 L 2105.58 71.17 L 2101.68 70.87 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2108.86 1534.29 L 2010.8 316.35" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2010.38 311.11 L 2014.43 317.81 L 2010.8 316.35 L 2007.45 318.37 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2830" y="10" width="450" height="490" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(2834.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="374" height="490" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 499px; max-width: 439px; width: 375px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeThread.java</h1><pre><pre><pre><pre><span>public void </span>run() {<br /><span>  while </span>(<span>true</span>) {<br />    List&lt;T&gt; inputs = <span>null;<br /></span><span>    try </span>{<br /><span>      // Wait for notification to start the merge...<br /></span><span>      synchronized </span>(pendingToBeMerged) {<br /><span>        while</span>(pendingToBeMerged.size() &lt;= <span>0</span>) {<br />          pendingToBeMerged.wait()<span>;<br /></span>        }<br /><span>        // Pickup the inputs to merge.<br /></span>        inputs = pendingToBeMerged.removeFirst()<span>;<br /></span>      }<br /><br /><span>      // Merge<br /></span>      <b>merge(inputs)<span>;<br /></span> </b>   } <span>catch </span>(InterruptedException ie) {<br />      numPending.set(<span>0</span>)<span>;<br /></span><span>      return;<br /></span>    } <span>catch</span>(Throwable t) {<br />      numPending.set(<span>0</span>)<span>;<br /></span>      reporter.reportException(t)<span>;<br /></span><span>      return;<br /></span>    } <span>finally </span>{<br /><span>      synchronized </span>(<span>this</span>) {<br />        numPending.decrementAndGet()<span>;<br /></span>        notifyAll()<span>;<br /></span>      }<br />    }<br />  }<br />}</pre></pre></pre></pre></div></div></foreignObject><text x="187" y="251" fill="#000000" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 2330 1450 L 2826.69 74.56" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2828.48 69.62 L 2829.39 77.4 L 2826.69 74.56 L 2822.81 75.02 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2320 1490 L 2827 646.89" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2829.71 642.39 L 2829.1 650.19 L 2827 646.89 L 2823.1 646.58 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 2830.29 475.71 L 2332.92 1440.34" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2330.51 1445.01 L 2330.61 1437.18 L 2332.92 1440.34 L 2336.83 1440.39 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2830.29 1050 L 2324.82 1485.84" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 2320.85 1489.27 L 2323.86 1482.05 L 2324.82 1485.84 L 2328.43 1487.35 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2830" y="580" width="450" height="490" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(2834.5,569.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="374" height="490" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 499px; max-width: 439px; width: 375px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeThread.java</h1><pre><pre><pre><pre><span>public void </span>run() {<br /><span>  while </span>(<span>true</span>) {<br />    List&lt;T&gt; inputs = <span>null;<br /></span><span>    try </span>{<br /><span>      // Wait for notification to start the merge...<br /></span><span>      synchronized </span>(pendingToBeMerged) {<br /><span>        while</span>(pendingToBeMerged.size() &lt;= <span>0</span>) {<br />          pendingToBeMerged.wait()<span>;<br /></span>        }<br /><span>        // Pickup the inputs to merge.<br /></span>        inputs = pendingToBeMerged.removeFirst()<span>;<br /></span>      }<br /><br /><span>      // Merge<br /></span>      <b>merge(inputs)</b><span><b>;</b><br /></span>    } <span>catch </span>(InterruptedException ie) {<br />      numPending.set(<span>0</span>)<span>;<br /></span><span>      return;<br /></span>    } <span>catch</span>(Throwable t) {<br />      numPending.set(<span>0</span>)<span>;<br /></span>      reporter.reportException(t)<span>;<br /></span><span>      return;<br /></span>    } <span>finally </span>{<br /><span>      synchronized </span>(<span>this</span>) {<br />        numPending.decrementAndGet()<span>;<br /></span>        notifyAll()<span>;<br /></span>      }<br />    }<br />  }<br />}</pre></pre></pre></pre></div></div></foreignObject><text x="187" y="251" fill="#000000" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><rect x="3500" y="10" width="660" height="1180" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(3504.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="648" height="1189" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1189px; max-width: 649px; width: 648.571px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><pre><span>private class </span>InMemoryMerger <span>extends </span>MergeThread&lt;InMemoryMapOutput&lt;K<span>,</span>V&gt;<span>, </span>K<span>,</span>V&gt; {<br /><br /><span>  public </span>InMemoryMerger(MergeManagerImpl&lt;K<span>, </span>V&gt; manager) {<br /><span>    super</span>(manager<span>, </span>Integer.MAX_VALUE<span>, </span>exceptionReporter)<span>;<br /></span>    setName<br />    (<span>"InMemoryMerger - Thread to merge in-memory shuffled map-outputs"</span>)<span>;<br /></span>    setDaemon(<span>true</span>)<span>;<br /></span>}<br /><br />  @Override<br /><span>  public void </span>merge(List&lt;InMemoryMapOutput&lt;K<span>,</span>V&gt;&gt; inputs) <span>throws </span>IOException {<br /><span>    if </span>(inputs == <span>null </span>|| inputs.size() == <span>0</span>) {<br /><span>      return;<br /></span>    }<br /><br /><span>    //name this output file same as the name of the first file that is <br /></span><span>    //there in the current list of inmem files (this is guaranteed to<br /></span><span>    //be absent on the disk currently. So we don't overwrite a prev. <br /></span><span>    //created spill). Also we need to create the output file now since<br /></span><span>    //it is not guaranteed that this file will be present after merge<br /></span><span>    //is called (we delete empty files as soon as we see them<br /></span><span>    //in the merge method)<br /></span><span><br /></span><span>    //figure out the mapId <br /></span>    TaskAttemptID mapId = inputs.get(<span>0</span>).getMapId()<span>;<br /></span>    TaskID mapTaskId = mapId.getTaskID()<span>;<br /></span><span><br /></span>    List&lt;Segment&lt;K<span>, </span>V&gt;&gt; inMemorySegments = <span>new </span>ArrayList&lt;Segment&lt;K<span>, </span>V&gt;&gt;()<span>;<br /></span><span>    long </span>mergeOutputSize = createInMemorySegments(inputs<span>, </span>inMemorySegments<span>,</span><span>0</span>)<span>;<br /></span><span>    int </span>noInMemorySegments = inMemorySegments.size()<span>;<br /></span><span><br /></span>    Path outputPath = mapOutputFile.getInputFileForWrite(mapTaskId<span>,<br /></span>                    mergeOutputSize).suffix(<br />                                     Task.MERGED_OUTPUT_PREFIX)<span>;<br /></span><span><br /></span>    FSDataOutputStream out = CryptoUtils.wrapIfNecessary(jobConf<span>, </span>rfs.create(outputPath))<span>;<br /></span>    Writer&lt;K<span>, </span>V&gt; writer = <span>new </span>Writer&lt;K<span>, </span>V&gt;(jobConf<span>, </span>out<span>,<br /></span>      (Class&lt;K&gt;) jobConf.getMapOutputKeyClass()<span>,<br /></span>      (Class&lt;V&gt;) jobConf.getMapOutputValueClass()<span>, </span>codec<span>, null, true</span>)<span>;<br /></span><span><br /></span>    RawKeyValueIterator rIter = <span>null;<br /></span>    CompressAwarePath compressAwarePath<span>;<br /></span><span>    try </span>{<br />      LOG.info(<span>"Initiating in-memory merge with " </span>+ noInMemorySegments + <br /><span>               " segments..."</span>)<span>;<br /></span><span><br /></span>      rIter = <b>Merger.merge(jobConf<span>, </span>rfs<span>,<br /></span>                          (Class&lt;K&gt;)jobConf.getMapOutputKeyClass()<span>,<br /></span>                          (Class&lt;V&gt;)jobConf.getMapOutputValueClass()<span>,<br /></span>                           inMemorySegments<span>, </span>inMemorySegments.size()<span>,<br /></span><span>                           new </span>Path(reduceId.toString())<span>,<br /></span>                          (RawComparator&lt;K&gt;)jobConf.getOutputKeyComparator()<span>,<br /></span>                           reporter<span>, </span>spilledRecordsCounter<span>, null, null</span>)</b><span><b>;</b><br /></span><span><br /></span><span>      if </span>(<span>null </span>== combinerClass) {<br />        Merger.writeFile(rIter<span>, </span>writer<span>, </span>reporter<span>, </span>jobConf)<span>;<br /></span>      } <span>else </span>{<br />        combineCollector.setWriter(writer)<span>;<br /></span>        combineAndSpill(rIter<span>, </span>reduceCombineInputCounter)<span>;<br /></span>      }<br />      writer.close()<span>;<br /></span>      compressAwarePath = <span>new </span>CompressAwarePath(outputPath<span>,<br /></span>      writer.getRawLength()<span>, </span>writer.getCompressedLength())<span>;<br /></span><span><br /></span>      LOG.info(reduceId +  <br /><span>               " Merge of the " </span>+ noInMemorySegments +<br /><span>               " files in-memory complete." </span>+<br /><span>               " Local file is " </span>+ outputPath + <span>" of size " </span>+ <br />               localFS.getFileStatus(outputPath).getLen())<span>;<br /></span>    } <span>catch </span>(IOException e) { <br /><span>      //make sure that we delete the ondisk file that we created <br /></span><span>      //earlier when we invoked cloneFileAttributes<br /></span>      localFS.delete(outputPath<span>, true</span>)<span>;<br /></span><span>      throw </span>e<span>;<br /></span>    }<br /><br /><span>    // Note the output of the merge<br /></span>    closeOnDiskFile(compressAwarePath)<span>;<br /></span>  }<br />}</pre></pre></pre></pre></div></div></foreignObject><text x="324" y="600" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 2980.29 260 L 3497.43 207.14" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="3500" y="1220" width="660" height="1100" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(3504.5,1209.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="648" height="1106" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1109px; max-width: 649px; width: 648.571px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><pre><pre><span>private class </span>OnDiskMerger <span>extends </span>MergeThread&lt;CompressAwarePath<span>,</span>K<span>,</span>V&gt; {<br /><br /><span>  public </span>OnDiskMerger(MergeManagerImpl&lt;K<span>, </span>V&gt; manager) {<br /><span>    super</span>(manager<span>, </span>ioSortFactor<span>, </span>exceptionReporter)<span>;<br /></span>    setName(<span>"OnDiskMerger - Thread to merge on-disk map-outputs"</span>)<span>;<br /></span>    setDaemon(<span>true</span>)<span>;<br /></span>  }<br /><br />  @Override<br /><span>  public void </span>merge(List&lt;CompressAwarePath&gt; inputs) <span>throws </span>IOException {<br /><span>    // sanity check<br /></span><span>    if </span>(inputs == <span>null </span>|| inputs.isEmpty()) {<br />      LOG.info(<span>"No ondisk files to merge..."</span>)<span>;<br /></span><span>      return;<br /></span>    }<br /><br /><span>    long </span>approxOutputSize = <span>0</span><span>;<br /></span><span>    int </span>bytesPerSum = <br />      jobConf.getInt(<span>"io.bytes.per.checksum"</span><span>, </span><span>512</span>)<span>;<br /></span><span><br /></span>    LOG.info(<span>"OnDiskMerger: We have  " </span>+ inputs.size() + <br /><span>             " map outputs on disk. Triggering merge..."</span>)<span>;<br /></span><span><br /></span><span>    // 1. Prepare the list of files to be merged. <br /></span><span>    for </span>(CompressAwarePath file : inputs) {<br />      approxOutputSize += localFS.getFileStatus(file).getLen()<span>;<br /></span>    }<br /><br /><span>    // add the checksum length<br /></span>    approxOutputSize += <br />      ChecksumFileSystem.getChecksumLength(approxOutputSize<span>, </span>bytesPerSum)<span>;<br /></span><span><br /></span><span>    // 2. Start the on-disk merge process<br /></span>    Path outputPath = <br />      localDirAllocator.getLocalPathForWrite(inputs.get(<span>0</span>).toString()<span>, <br /></span>        approxOutputSize<span>, </span>jobConf).suffix(Task.MERGED_OUTPUT_PREFIX)<span>;<br /></span><span><br /></span>    FSDataOutputStream out = CryptoUtils.wrapIfNecessary(jobConf<span>, </span>rfs.create(outputPath))<span>;<br /></span>    Writer&lt;K<span>, </span>V&gt; writer = <span>new </span>Writer&lt;K<span>, </span>V&gt;(jobConf<span>, </span>out<span>,<br /></span>                         (Class&lt;K&gt;) jobConf.getMapOutputKeyClass()<span>,<br /></span>                         (Class&lt;V&gt;) jobConf.getMapOutputValueClass()<span>, </span>codec<span>, null, true</span>)<span>;<br /></span><span><br /></span>    RawKeyValueIterator iter  = <span>null;<br /></span>    CompressAwarePath compressAwarePath<span>;<br /></span>    Path tmpDir = <span>new </span>Path(reduceId.toString())<span>;<br /></span><span>    try </span>{<br />      iter = <b>Merger.merge(jobConf<span>, </span>rfs<span>,<br /></span>                         (Class&lt;K&gt;) jobConf.getMapOutputKeyClass()<span>,<br /></span>                         (Class&lt;V&gt;) jobConf.getMapOutputValueClass()<span>,<br /></span>                          codec<span>, </span>inputs.toArray(<span>new </span>Path[inputs.size()])<span>, <br /></span><span>                          true, </span>ioSortFactor<span>, </span>tmpDir<span>, <br /></span>                         (RawComparator&lt;K&gt;) jobConf.getOutputKeyComparator()<span>, <br /></span>                         reporter<span>, </span>spilledRecordsCounter<span>, null, <br /></span>                         mergedMapOutputsCounter<span>, null</span>)</b><span><b>;</b><br /></span><span><br /></span>      Merger.writeFile(iter<span>, </span>writer<span>, </span>reporter<span>, </span>jobConf)<span>;<br /></span>      writer.close()<span>;<br /></span>      compressAwarePath = <span>new </span>CompressAwarePath(outputPath<span>,   <br /></span>      writer.getRawLength()<span>, </span>writer.getCompressedLength())<span>;<br /></span>    } <span>catch </span>(IOException e) {<br />      localFS.delete(outputPath<span>, true</span>)<span>;<br /></span><span>      throw </span>e<span>;<br /></span>    }<br /><br />    closeOnDiskFile(compressAwarePath)<span>;<br /></span><span><br /></span>    LOG.info(reduceId +<br /><span>             " Finished merging " </span>+ inputs.size() + <br /><span>             " map output files on disk of total-size " </span>+ <br />             approxOutputSize + <span>"." </span>+ <br /><span>             " Local output file is " </span>+ outputPath + <span>" of size " </span>+<br />             localFS.getFileStatus(outputPath).getLen())<span>;<br /></span>  }<br />}</pre></pre></pre></pre></pre></div></div></foreignObject><text x="324" y="559" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 2980.29 840 L 3494.57 1401.43" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="785" y="635" width="620" height="1170" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(789.5,624.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="598" height="1176" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1179px; max-width: 609px; width: 599px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Shuffle.java</h1><pre>@Override<br /><span>public </span>RawKeyValueIterator run() <span>throws </span>IOException<span>, </span>InterruptedException {<br /><span>  // Scale the maximum events we fetch per RPC call to mitigate OOM issues<br /></span><span>  // on the ApplicationMaster when a thundering herd of reducers fetch events<br /></span><span>  // TODO: This should not be necessary after HADOOP-8942<br /></span><span>  int </span>eventsPerReducer = Math.max(MIN_EVENTS_TO_FETCH<span>,<br /></span>  MAX_RPC_OUTSTANDING_EVENTS / jobConf.getNumReduceTasks())<span>;<br /></span><span>  int </span>maxEventsToFetch = Math.min(MAX_EVENTS_TO_FETCH<span>, </span>eventsPerReducer)<span>;<br /></span><span><br /></span><span>  // Start the map-completion events fetcher thread<br /></span><span>  final </span>EventFetcher&lt;K<span>, </span>V&gt; eventFetcher =<br /><span>       new </span>EventFetcher&lt;K<span>, </span>V&gt;(reduceId<span>, </span>umbilical<span>, </span>scheduler<span>, this,<br /></span>       maxEventsToFetch)<span>;<br /></span>  eventFetcher.start()<span>;<br /></span><span><br /></span><span>  // Start the map-output fetcher threads<br /></span><span>  boolean </span>isLocal = localMapFiles != <span>null;<br /></span><span>  final int </span>numFetchers = isLocal ? <span>1 </span>:<br />      jobConf.getInt(MRJobConfig.SHUFFLE_PARALLEL_COPIES<span>, </span><span>5</span>)<span>;<br /></span>  Fetcher&lt;K<span>, </span>V&gt;[] fetchers = <span>new </span>Fetcher[numFetchers]<span>;<br /></span><span>  if </span>(isLocal) {<br />    fetchers[<span>0</span>] = <span>new </span>LocalFetcher&lt;K<span>, </span>V&gt;(jobConf<span>, </span>reduceId<span>, </span>scheduler<span>,<br /></span>                    merger<span>, </span>reporter<span>, </span>metrics<span>, this, </span>reduceTask.getShuffleSecret()<span>,<br /></span>                    localMapFiles)<span>;<br /></span><b>    fetchers[<span>0</span>].start()<span>;<br /></span></b>  } <span>else </span>{<br /><span>    for </span>(<span>int </span>i=<span>0</span><span>; </span>i &lt; numFetchers<span>; </span>++i) {<br />      fetchers[i] = <span>new </span>Fetcher&lt;K<span>, </span>V&gt;(jobConf<span>, </span>reduceId<span>, </span>scheduler<span>, </span>merger<span>,<br /></span>                                     reporter<span>, </span>metrics<span>, this, <br /></span>                                     reduceTask.getShuffleSecret())<span>;<br /></span><b>      fetchers[i].start()<span>;<br /></span></b>    }<br />  }<br /><br /><span>  // Wait for shuffle to complete successfully<br /></span><span>  while </span>(!scheduler.waitUntilDone(PROGRESS_FREQUENCY)) {<br />    reporter.progress()<span>;<br /></span><span><br /></span><span>    synchronized </span>(<span>this</span>) {<br /><span>      if </span>(throwable != <span>null</span>) {<br /><span>        throw new </span>ShuffleError(<span>"error in shuffle in " </span>+ throwingThreadName<span>,<br /></span>                               throwable)<span>;<br /></span>      }<br />    }<br />  }<br /><br /><span>  // Stop the event-fetcher thread<br /></span>  eventFetcher.shutDown()<span>;<br /></span><span><br /></span><span>  // Stop the map-output fetcher threads<br /></span><span>  for </span>(Fetcher&lt;K<span>, </span>V&gt; fetcher : fetchers) {<br />    fetcher.shutDown()<span>;<br /></span>  }<br /><br /><span>  // stop the scheduler<br /></span>  scheduler.close()<span>;<br /></span><span><br /></span>  copyPhase.complete()<span>; </span><span>// copy is already complete<br /></span>  taskStatus.setPhase(TaskStatus.Phase.SORT)<span>;<br /></span>  reduceTask.statusUpdate(umbilical)<span>;<br /></span><span><br /></span><span>  // Finish the on-going merges...<br /></span>  RawKeyValueIterator kvIter = <span>null;<br /></span><span>  try </span>{<br /><b>    kvIter = merger.close()<span>;<br /></span></b>  } <span>catch </span>(Throwable e) {<br /><span>    throw new </span>ShuffleError(<span>"Error while doing final merge "</span><span>, </span>e)<span>;<br /></span>  }<br /><br /><span>  // Sanity check<br /></span><span>  synchronized </span>(<span>this</span>) {<br /><span>    if </span>(throwable != <span>null</span>) {<br /><span>      throw new </span>ShuffleError(<span>"error in shuffle in " </span>+ throwingThreadName<span>,<br /></span>                           throwable)<span>;<br /></span>    }<br />  }<br /><br /><span>  return </span>kvIter<span>;<br /></span>}</pre></div></div></foreignObject><text x="299" y="594" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 784.57 1778.57 L 283.54 935.47" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 280.86 930.96 L 287.44 935.19 L 283.54 935.47 L 281.42 938.77 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 920 L 773.01 708.23" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 777.83 706.16 L 772.78 712.13 L 773.01 708.23 L 770.02 705.7 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><rect x="1542.5" y="635" width="430" height="370" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(1547.5,624.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="410" height="378" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 379px; max-width: 419px; width: 411px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>LocalFetcher.java</h1><pre><pre><span>public void </span>run() {<br /><span>  // Create a worklist of task attempts to work over.<br /></span>  Set&lt;TaskAttemptID&gt; maps = <span>new </span>HashSet&lt;TaskAttemptID&gt;()<span>;<br /></span><span>  for </span>(TaskAttemptID map : localMapFiles.keySet()) {<br />    maps.add(map)<span>;<br /></span>  }<br /><br /><span>  while </span>(maps.size() &gt; <span>0</span>) {<br /><span>    try </span>{<br /><span>      // If merge is on, block<br /></span><b>      merger.waitForResource()<span>;<br /></span></b>      metrics.threadBusy()<span>;<br /></span><span><br /></span><span>      // Copy as much as is possible.<br /></span>      doCopy(maps)<span>;<br /></span>      metrics.threadFree()<span>;<br /></span>    } <span>catch </span>(InterruptedException ie) {<br />    } <span>catch </span>(Throwable t) {<br />      exceptionReporter.reportException(t)<span>;<br /></span>    }<br />  }<br />}</pre></pre></div></div></foreignObject><text x="205" y="195" fill="#000000" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><rect x="1460" y="1110" width="490" height="440" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(1464.5,1099.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="468" height="448" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 449px; max-width: 479px; width: 469px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Fetcher.java</h1><pre><pre><pre><span>public void </span>run() {<br /><span>  try </span>{<br /><span>    while </span>(!stopped &amp;&amp; !Thread.currentThread().isInterrupted()) {<br />      MapHost host = <span>null;<br /></span><span>      try </span>{<br /><span>        // If merge is on, block<br /></span><b>        merger.waitForResource()<span>;<br /></span></b><span><br /></span><span>        // Get a host to shuffle from<br /></span><b>        host = scheduler.getHost()<span>;<br /></span></b>        metrics.threadBusy()<span>;<br /></span><span><br /></span><span>        // Shuffle<br /></span>        <b>copyFromHost(host)</b><span><b>;</b><br /></span>      } <span>finally </span>{<br /><span>        if </span>(host != <span>null</span>) {<br />          scheduler.freeHost(host)<span>;<br /></span>          metrics.threadFree()<span>;            <br /></span>        }<br />      }<br />    }<br />  } <span>catch </span>(InterruptedException ie) {<br /><span>    return;<br /></span>  } <span>catch </span>(Throwable t) {<br />    exceptionReporter.reportException(t)<span>;<br /></span>  }<br />}<br /></pre></pre></pre></div></div></foreignObject><text x="234" y="230" fill="#000000" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 970.29 1020 L 1534.76 696.03" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1539.32 693.41 L 1534.99 699.93 L 1534.76 696.03 L 1531.5 693.86 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 984.57 1114.29 L 1451.1 1166.44" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1456.32 1167.02 L 1448.97 1169.72 L 1451.1 1166.44 L 1449.75 1162.76 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1454.57 1531.43 L 985.1 1124.17" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 981.13 1120.73 L 988.71 1122.68 L 985.1 1124.17 L 984.12 1127.96 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 1537.43 985.71 L 976.35 1029.5" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 971.11 1029.91 L 977.82 1025.88 L 976.35 1029.5 L 978.37 1032.86 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><rect x="2830" y="1640" width="590" height="1690" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(2834.5,1629.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="569" height="1694" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1699px; max-width: 579px; width: 570px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Fetcher.java</h1><pre><pre><pre><pre><span>private </span>TaskAttemptID[] copyMapOutput(MapHost host<span>,<br /></span>                              DataInputStream input<span>,<br /></span>                              Set&lt;TaskAttemptID&gt; remaining<span>,<br /></span><span>                              boolean </span>canRetry) <span>throws </span>IOException {<br />  MapOutput&lt;K<span>,</span>V&gt; mapOutput = <span>null;<br /></span>  TaskAttemptID mapId = <span>null;<br /></span><span>  long </span>decompressedLength = -<span>1</span><span>;<br /></span><span>  long </span>compressedLength = -<span>1</span><span>;<br /></span><span><br /></span><span>  try </span>{<br /><span>    long </span>startTime = Time.monotonicNow()<span>;<br /></span><span>    int </span>forReduce = -<span>1</span><span>;<br /></span><span>    //Read the shuffle header<br /></span><span>    try </span>{<br />      ShuffleHeader header = <span>new </span>ShuffleHeader()<span>;<br /></span>      header.readFields(input)<span>;<br /></span>      mapId = TaskAttemptID.forName(header.mapId)<span>;<br /></span>      compressedLength = header.compressedLength<span>;<br /></span>      decompressedLength = header.uncompressedLength<span>;<br /></span>      forReduce = header.forReduce<span>;<br /></span>    } <span>catch </span>(IllegalArgumentException e) {<br />      badIdErrs.increment(<span>1</span>)<span>;<br /></span>      LOG.warn(<span>"Invalid map id "</span><span>, </span>e)<span>;<br /></span><span>      //Don't know which one was bad, so consider all of them as bad<br /></span><span>      return </span>remaining.toArray(<span>new </span>TaskAttemptID[remaining.size()])<span>;<br /></span>    }<br /><br />    InputStream is = input<span>;<br /></span>    is = CryptoUtils.wrapIfNecessary(jobConf<span>, </span>is<span>, </span>compressedLength)<span>;<br /></span>    compressedLength -= CryptoUtils.cryptoPadding(jobConf)<span>;<br /></span>    decompressedLength -= CryptoUtils.cryptoPadding(jobConf)<span>;<br /></span><span><br /></span><span>    // Do some basic sanity verification<br /></span><span>    if </span>(!verifySanity(compressedLength<span>, </span>decompressedLength<span>, </span>forReduce<span>,<br /></span>      remaining<span>, </span>mapId)) {<br /><span>      return new </span>TaskAttemptID[] {mapId}<span>;<br /></span>    }<br /><br /><span>    if</span>(LOG.isDebugEnabled()) {<br />      LOG.debug(<span>"header: " </span>+ mapId + <span>", len: " </span>+ compressedLength + <br /><span>                ", decomp len: " </span>+ decompressedLength)<span>;<br /></span>    }<br /><br /><span>    // Get the location for the map output - either in-memory or on-disk<br /></span><span>    try </span>{<br /><b>      mapOutput = merger.reserve(mapId<span>, </span>decompressedLength<span>, </span>id)<span>;<br /></span></b>    } <span>catch </span>(IOException ioe) {<br /><span>      // kill this reduce attempt<br /></span>      ioErrs.increment(<span>1</span>)<span>;<br /></span>      scheduler.reportLocalError(ioe)<span>;<br /></span><span>      return </span>EMPTY_ATTEMPT_ID_ARRAY<span>;<br /></span>    }<br /><br /><span>    // Check if we can shuffle *now* ...<br /></span><span>    if </span>(mapOutput == <span>null</span>) {<br />      LOG.info(<span>"fetcher#" </span>+ id + <span>" - MergeManager returned status WAIT ..."</span>)<span>;<br /></span><span>      //Not an error but wait to process data.<br /></span><span>      return </span>EMPTY_ATTEMPT_ID_ARRAY<span>;<br /></span>    } <br /><br /><span>    // The codec for lz0,lz4,snappy,bz2,etc. throw java.lang.InternalError<br /></span><span>    // on decompression failures. Catching and re-throwing as IOException<br /></span><span>    // to allow fetch failure logic to be processed<br /></span><span>    try </span>{<br /><span>      // Go!<br /></span>      LOG.info(<span>"fetcher#" </span>+ id + <span>" about to shuffle output of map "<br /></span>          + mapOutput.getMapId() + <span>" decomp: " </span>+ decompressedLength<br />          + <span>" len: " </span>+ compressedLength + <span>" to " </span>+ mapOutput.getDescription())<span>;<br /></span>      mapOutput.shuffle(host<span>, </span>is<span>, </span>compressedLength<span>, </span>decompressedLength<span>,<br /></span>      metrics<span>, </span>reporter)<span>;<br /></span>    } <span>catch </span>(java.lang.InternalError | Exception e) {<br />      LOG.warn(<span>"Failed to shuffle for fetcher#"</span>+id<span>, </span>e)<span>;<br /></span><span>      throw new </span>IOException(e)<span>;<br /></span>    }<br /><br /><span>    // Inform the shuffle scheduler<br /></span><span>    long </span>endTime = Time.monotonicNow()<span>;<br /></span><span>    // Reset retryStartTime as map task make progress if retried before.<br /></span>    retryStartTime = <span>0</span><span>;<br /></span><span><br /></span><b>    scheduler.copySucceeded(mapId<span>, </span>host<span>, </span>compressedLength<span>, <br /></span></b>    startTime<span>, </span>endTime<span>, </span>mapOutput)<span>;<br /></span><span>    // Note successful shuffle<br /></span>    remaining.remove(mapId)<span>;<br /></span>    metrics.successFetch()<span>;<br /></span><span>    return null;<br /></span>  } <span>catch </span>(IOException ioe) {<br /><span>    if </span>(mapOutput != <span>null</span>) {<br />      mapOutput.abort()<span>;<br /></span>    }<br /><br /><span>    if </span>(canRetry) {<br />      checkTimeoutOrRetry(host<span>, </span>ioe)<span>;<br /></span>    } <br /><br />    ioErrs.increment(<span>1</span>)<span>;<br /></span><span>    if </span>(mapId == <span>null </span>|| mapOutput == <span>null</span>) {<br />      LOG.warn(<span>"fetcher#" </span>+ id + <span>" failed to read map header" </span>+ <br />               mapId + <span>" decomp: " </span>+ <br />               decompressedLength + <span>", " </span>+ compressedLength<span>, </span>ioe)<span>;<br /></span><span>      if</span>(mapId == <span>null</span>) {<br /><span>        return </span>remaining.toArray(<span>new </span>TaskAttemptID[remaining.size()])<span>;<br /></span>      } <span>else </span>{<br /><span>        return new </span>TaskAttemptID[] {mapId}<span>;<br /></span>      }<br />    }<br /><br />    LOG.warn(<span>"Failed to shuffle output of " </span>+ mapId + <br /><span>             " from " </span>+ host.getHostName()<span>, </span>ioe)<span>; <br /></span><span><br /></span><span>    // Inform the shuffle-scheduler<br /></span>    metrics.failedFetch()<span>;<br /></span><span>    return new </span>TaskAttemptID[] {mapId}<span>;<br /></span>  }<br /><br />}</pre></pre></pre></pre></div></div></foreignObject><text x="285" y="853" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 1660.29 1350 L 2110.29 1704.29" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="3592.5" y="2415" width="605" height="650" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(3597.5,2404.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="569" height="658" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 659px; max-width: 594px; width: 570px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><pre><pre>@Override<br /><span>public synchronized </span>MapOutput&lt;K<span>,</span>V&gt; reserve(TaskAttemptID mapId<span>, <br /></span><span>                                           long </span>requestedSize<span>,<br /></span><span>                                           int </span>fetcher<br />                                           ) <span>throws </span>IOException {<br /><span>  if </span>(requestedSize &gt; maxSingleShuffleLimit) {<br />    LOG.info(mapId + <span>": Shuffling to disk since " </span>+ requestedSize + <br /><span>            " is greater than maxSingleShuffleLimit (" </span>+ <br />             maxSingleShuffleLimit + <span>")"</span>)<span>;<br /></span><span>    return new </span>OnDiskMapOutput&lt;K<span>,</span>V&gt;(mapId<span>, this, </span>requestedSize<span>, </span>jobConf<span>,<br /></span>      fetcher<span>, true, </span>FileSystem.getLocal(jobConf).getRaw()<span>,<br /></span>        mapOutputFile.getInputFileForWrite(mapId.getTaskID()<span>, </span>requestedSize))<span>;<br /></span>  }<br /><br /><span>  // Stall shuffle if we are above the memory limit<br /></span><span><br /></span><span>  // It is possible that all threads could just be stalling and not make<br /></span><span>  // progress at all. This could happen when:<br /></span><span>  //<br /></span><span>  // requested size is causing the used memory to go above limit &amp;&amp;<br /></span><span>  // requested size &lt; singleShuffleLimit &amp;&amp;<br /></span><span>  // current used size &lt; mergeThreshold (merge will not get triggered)<br /></span><span>  //<br /></span><span>  // To avoid this from happening, we allow exactly one thread to go past<br /></span><span>  // the memory limit. We check (usedMemory &gt; memoryLimit) and not<br /></span><span>  // (usedMemory + requestedSize &gt; memoryLimit). When this thread is done<br /></span><span>  // fetching, this will automatically trigger a merge thereby unlocking<br /></span><span>  // all the stalled threads<br /></span><span><br /></span><span>  if </span>(usedMemory &gt; memoryLimit) {<br />    LOG.debug(mapId + <span>": Stalling shuffle since usedMemory (" </span>+ usedMemory<br />        + <span>") is greater than memoryLimit (" </span>+ memoryLimit + <span>")." </span>+ <br /><span>        " CommitMemory is (" </span>+ commitMemory + <span>")"</span>)<span>; <br /></span><span>    return null;<br /></span>  }<br /><br /><span>  // Allow the in-memory shuffle to progress<br /></span>  LOG.debug(mapId + <span>": Proceeding with shuffle since usedMemory ("<br /></span>           + usedMemory + <span>") is lesser than memoryLimit (" </span>+ memoryLimit + <span>")."<br /></span>           + <span>"CommitMemory is (" </span>+ commitMemory + <span>")"</span>)<span>; <br /></span><span>  return </span>unconditionalReserve(mapId<span>, </span>requestedSize<span>, true</span>)<span>;<br /></span>}</pre></pre></pre></pre></pre></div></div></foreignObject><text x="285" y="335" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 3584.57 2491.43 L 3300.29 2330" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="4878" y="2975" width="600" height="410" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(4882.5,2964.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="569" height="419" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 419px; max-width: 589px; width: 570px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><span>public synchronized void </span>closeInMemoryFile(InMemoryMapOutput&lt;K<span>,</span>V&gt; mapOutput) { <br />  inMemoryMapOutputs.add(mapOutput)<span>;<br /></span>  LOG.info(<span>"closeInMemoryFile -&gt; map-output of size: " </span>+ mapOutput.getSize()<br />      + <span>", inMemoryMapOutputs.size() -&gt; " </span>+ inMemoryMapOutputs.size()<br />      + <span>", commitMemory -&gt; " </span>+ commitMemory + <span>", usedMemory -&gt;" </span>+ usedMemory)<span>;<br /></span><span><br /></span>  commitMemory+= mapOutput.getSize()<span>;<br /></span><span><br /></span><span>  // Can hang if mergeThreshold is really low.<br /></span><span>  if </span>(commitMemory &gt;= mergeThreshold) {<br />    LOG.info(<span>"Starting inMemoryMerger's merge since commitMemory=" </span>+<br />        commitMemory + <span>" &gt; mergeThreshold=" </span>+ mergeThreshold + <br /><span>        ". Current usedMemory=" </span>+ usedMemory)<span>;<br /></span>    inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs)<span>;<br /></span>    inMemoryMergedMapOutputs.clear()<span>;<br /></span>    inMemoryMerger.startMerge(inMemoryMapOutputs)<span>;<br /></span>    commitMemory = <span>0L</span><span>;  </span><span>// Reset commitMemory.<br /></span>  }<br /> <br /><span>  if </span>(memToMemMerger != <span>null</span>) {<br /><span>    if </span>(inMemoryMapOutputs.size() &gt;= memToMemMergeOutputsThreshold) { <br />      memToMemMerger.startMerge(inMemoryMapOutputs)<span>;<br /></span>    }<br />  }<br />}</pre></pre></div></div></foreignObject><text x="285" y="215" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><rect x="2110" y="1640" width="600" height="1155" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(2114.5,1629.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="569" height="1162" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 1164px; max-width: 589px; width: 570px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>Fetcher.java</h1><pre><pre><pre>@VisibleForTesting<br /><span>protected void </span>copyFromHost(MapHost host) <span>throws </span>IOException {<br /><span>  // reset retryStartTime for a new host<br /></span>  retryStartTime = <span>0</span><span>;<br /></span><span>  // Get completed maps on 'host'<br /></span>  List&lt;TaskAttemptID&gt; maps = scheduler.getMapsForHost(host)<span>;<br /></span><span><br /></span><span>  // Sanity check to catch hosts with only 'OBSOLETE' maps, <br /></span><span>  // especially at the tail of large jobs<br /></span><span>  if </span>(maps.size() == <span>0</span>) {<br /><span>    return;<br /></span>  }<br /><br /><span>  if</span>(LOG.isDebugEnabled()) {<br />    LOG.debug(<span>"Fetcher " </span>+ id + <span>" going to fetch from " </span>+ host + <span>" for: "<br /></span>             + maps)<span>;<br /></span>  }<br /><br /><span>  // List of maps to be fetched yet<br /></span>  Set&lt;TaskAttemptID&gt; remaining = <span>new </span>HashSet&lt;TaskAttemptID&gt;(maps)<span>;<br /></span><span><br /></span><span>  // Construct the url and connect<br /></span>  URL url = getMapOutputURL(host<span>, </span>maps)<span>;<br /></span>  DataInputStream input = <span>null;<br /></span><span><br /></span><span>  try </span>{<br />    input = openShuffleUrl(host<span>, </span>remaining<span>, </span>url)<span>;<br /></span><span>    if </span>(input == <span>null</span>) {<br /><span>      return;<br /></span>    }<br /><br /><span>    // Loop through available map-outputs and fetch them<br /></span><span>    // On any error, faildTasks is not null and we exit<br /></span><span>    // after putting back the remaining maps to the <br /></span><span>    // yet_to_be_fetched list and marking the failed tasks.<br /></span>    TaskAttemptID[] failedTasks = <span>null;<br /></span><span>    while </span>(!remaining.isEmpty() &amp;&amp; failedTasks == <span>null</span>) {<br /><span>      try </span>{<br />        <b>failedTasks = copyMapOutput(host<span>, </span>input<span>, </span>remaining<span>, </span>fetchRetryEnabled)</b><span><b>;</b><br /></span>      } <span>catch </span>(IOException e) {<br />        IOUtils.cleanupWithLogger(LOG<span>, </span>input)<span>;<br /></span><span>        //<br /></span><span>        // Setup connection again if disconnected by NM<br /></span>        connection.disconnect()<span>;<br /></span><span>        // Get map output from remaining tasks only.<br /></span>        url = getMapOutputURL(host<span>, </span>remaining)<span>;<br /></span>        input = openShuffleUrl(host<span>, </span>remaining<span>, </span>url)<span>;<br /></span><span>        if </span>(input == <span>null</span>) {<br /><span>          return;<br /></span>        }<br />      }<br />    }<br /><br /><span>    if</span>(failedTasks != <span>null </span>&amp;&amp; failedTasks.length &gt; <span>0</span>) {<br />      LOG.warn(<span>"copyMapOutput failed for tasks "</span>+Arrays.toString(failedTasks))<span>;<br /></span>      scheduler.hostFailed(host.getHostName())<span>;<br /></span><span>      for</span>(TaskAttemptID left: failedTasks) {<br />        scheduler.copyFailed(left<span>, </span>host<span>, true, false</span>)<span>;<br /></span>      }<br />    }<br /><br /><span>    // Sanity check<br /></span><span>    if </span>(failedTasks == <span>null </span>&amp;&amp; !remaining.isEmpty()) {<br /><span>      throw new </span>IOException(<span>"server didn't return all expected map outputs: "<br /></span>                           + remaining.size() + <span>" left."</span>)<span>;<br /></span>    }<br />    input.close()<span>;<br /></span>    input = <span>null;<br /></span>  } <span>finally </span>{<br /><span>    if </span>(input != <span>null</span>) {<br />      IOUtils.cleanupWithLogger(LOG<span>, </span>input)<span>;<br /></span>      input = <span>null;<br /></span>    }<br /><span>    for </span>(TaskAttemptID left : remaining) {<br />      scheduler.putBackKnownMapOutput(host<span>, </span>left)<span>;<br /></span>    }<br />  }<br />}</pre></pre></pre></div></div></foreignObject><text x="285" y="587" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 2828.86 1701.43 L 2690.29 2234.29" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="3630" y="3110" width="530" height="610" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(3634.5,3099.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="497" height="616" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 619px; max-width: 519px; width: 498px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>ShuffleSchedulerImpl.java</h1><pre><pre><pre><pre><pre><pre><span>public synchronized void </span>copySucceeded(TaskAttemptID mapId<span>,<br /></span>                                       MapHost host<span>,<br /></span><span>                                       long </span>bytes<span>,<br /></span><span>                                       long </span>startMillis<span>,<br /></span><span>                                       long </span>endMillis<span>,<br /></span>                                       MapOutput&lt;K<span>,</span>V&gt; output<br />                                       ) <span>throws </span>IOException {<br />  failureCounts.remove(mapId)<span>;<br /></span>  hostFailures.remove(host.getHostName())<span>;<br /></span><span>  int </span>mapIndex = mapId.getTaskID().getId()<span>;<br /></span><span><br /></span><span>  if </span>(!finishedMaps[mapIndex]) {<br /><b>    output.commit()<span>;<br /></span></b>    finishedMaps[mapIndex] = <span>true;<br /></span>    shuffledMapsCounter.increment(<span>1</span>)<span>;<br /></span><span>    if </span>(--remainingMaps == <span>0</span>) {<br />      notifyAll()<span>;<br /></span>    }<br /><br /><span>    // update single copy task status<br /></span><span>    long </span>copyMillis = (endMillis - startMillis)<span>;<br /></span><span>    if </span>(copyMillis == <span>0</span>) copyMillis = <span>1</span><span>;<br /></span><span>    float </span>bytesPerMillis = (<span>float</span>) bytes / copyMillis<span>;<br /></span><span>    float </span>transferRate = bytesPerMillis * BYTES_PER_MILLIS_TO_MBS<span>;<br /></span>    String individualProgress = <span>"copy task(" </span>+ mapId + <span>" succeeded"<br /></span>               + <span>" at " </span>+ mbpsFormat.format(transferRate) + <span>" MB/s)"</span><span>;<br /></span><span>    // update the aggregated status<br /></span>    copyTimeTracker.add(startMillis<span>, </span>endMillis)<span>;<br /></span><span><br /></span>    totalBytesShuffledTillNow += bytes<span>;<br /></span>    updateStatus(individualProgress)<span>;<br /></span>    reduceShuffleBytes.increment(bytes)<span>;<br /></span>    lastProgressTime = Time.monotonicNow()<span>;<br /></span>    LOG.debug(<span>"map " </span>+ mapId + <span>" done " </span>+ status.getStateString())<span>;<br /></span>  } <span>else </span>{<br />    LOG.warn(<span>"Aborting already-finished MapOutput for " </span>+ mapId)<span>;<br /></span>    output.abort()<span>;<br /></span>  }<br />}</pre></pre></pre></pre></pre></pre></div></div></foreignObject><text x="249" y="314" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 3630.29 3165.71 L 3250.29 2810" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="4233" y="3120" width="340" height="120" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(4237.5,3109.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="295" height="126" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 129px; max-width: 329px; width: 296px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>InMemoryMapOutput.java</h1><pre><pre><pre><pre><pre><pre><pre>@Override<br /><span>public void </span>commit() <span>throws </span>IOException {<br /><b>  getMerger().closeInMemoryFile(<span>this</span>)<span>;<br /></span></b>}</pre></pre></pre></pre></pre></pre></pre></div></div></foreignObject><text x="148" y="69" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 4233.14 3180 L 3810 3330" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><path d="M 4878.86 3031.43 L 4513.14 3210" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="4230" y="3430" width="533" height="160" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(4234.5,3419.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="522" height="168" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 169px; max-width: 522px; width: 521.571px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>OnDiskMapOutput.java</h1><pre><pre><pre><pre><pre><pre><pre><pre>@Override<br /><span>public void </span>commit() <span>throws </span>IOException {<br />  fs.rename(tmpOutputPath<span>, </span>outputPath)<span>;<br /></span>  CompressAwarePath compressAwarePath = <span>new </span>CompressAwarePath(outputPath<span>,<br /></span>    getSize()<span>, this</span>.compressedSize)<span>;<br /></span><b>  getMerger().closeOnDiskFile(compressAwarePath)<span>;<br /></span></b>}</pre></pre></pre></pre></pre></pre></pre></pre></div></div></foreignObject><text x="261" y="90" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 4227.43 3501.43 L 3790.29 3330" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="4981" y="3430" width="500" height="160" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(4985.5,3419.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="475" height="168" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 169px; max-width: 489px; width: 476px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre><pre><pre><pre><pre><pre><pre><span>public synchronized void </span>closeOnDiskFile(CompressAwarePath file) {<br />  onDiskMapOutputs.add(file)<span>;<br /></span><span><br /></span><span>  if </span>(onDiskMapOutputs.size() &gt;= (<span>2 </span>* ioSortFactor - <span>1</span>)) {<br />    onDiskMerger.startMerge(onDiskMapOutputs)<span>;<br /></span>  }<br />}</pre></pre></pre></pre></pre></pre></pre></pre></pre></div></div></foreignObject><text x="238" y="90" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 4986 3490 L 4583.14 3560" fill="none" stroke="#d6b656" stroke-width="3" stroke-miterlimit="10" stroke-dasharray="9 9" pointer-events="none"/><rect x="1085" y="1840" width="640" height="320" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(1089.5,1829.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="605" height="322" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 329px; max-width: 629px; width: 606px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre>@Override<br /><span>public </span>RawKeyValueIterator close() <span>throws </span>Throwable {<br /><span>  // Wait for on-going merges to complete<br /></span><span>  if </span>(memToMemMerger != <span>null</span>) { <br />    memToMemMerger.close()<span>;<br /></span>  }<br />  inMemoryMerger.close()<span>;<br /></span>  onDiskMerger.close()<span>;<br /></span><span><br /></span>  List&lt;InMemoryMapOutput&lt;K<span>, </span>V&gt;&gt; memory = <br /><span>    new </span>ArrayList&lt;InMemoryMapOutput&lt;K<span>, </span>V&gt;&gt;(inMemoryMergedMapOutputs)<span>;<br /></span>  inMemoryMergedMapOutputs.clear()<span>;<br /></span>  memory.addAll(inMemoryMapOutputs)<span>;<br /></span>  inMemoryMapOutputs.clear()<span>;<br /></span>  List&lt;CompressAwarePath&gt; disk = <span>new </span>ArrayList&lt;CompressAwarePath&gt;(onDiskMapOutputs)<span>;<br /></span>  onDiskMapOutputs.clear()<span>;<br /></span><b><span>  return </span>finalMerge(jobConf<span>, </span>rfs<span>, </span>memory<span>, </span>disk)<span>;<br /></span></b>}</pre></pre></div></div></foreignObject><text x="303" y="167" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><rect x="1340" y="2260" width="730" height="2040" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g transform="translate(1344.5,2249.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="691" height="2044" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 2049px; max-width: 719px; width: 692px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;"><h1>MergeManagerImpl.java</h1><pre><pre><pre>private RawKeyValueIterator finalMerge(JobConf job, FileSystem fs,<br />                                       List&lt;InMemoryMapOutput&lt;K,V&gt;&gt; inMemoryMapOutputs,<br />                                       List&lt;CompressAwarePath&gt; onDiskMapOutputs<br />                                     ) throws IOException {<br />  LOG.info("finalMerge called with " +<br />      inMemoryMapOutputs.size() + " in-memory map-outputs and " +<br />      onDiskMapOutputs.size() + " on-disk map-outputs");<br />  final long maxInMemReduce = getMaxInMemReduceLimit();<br />  // merge config params<br />  Class&lt;K&gt; keyClass = (Class&lt;K&gt;)job.getMapOutputKeyClass();<br />  Class&lt;V&gt; valueClass = (Class&lt;V&gt;)job.getMapOutputValueClass();<br />  boolean keepInputs = job.getKeepFailedTaskFiles();<br />  final Path tmpDir = new Path(reduceId.toString());<br />  final RawComparator&lt;K&gt; comparator =<br />    (RawComparator&lt;K&gt;)job.getOutputKeyComparator();<br /><br />  // segments required to vacate memory <br />  List&lt;Segment&lt;K,V&gt;&gt; memDiskSegments = new ArrayList&lt;Segment&lt;K,V&gt;&gt;();<br />  long inMemToDiskBytes = 0;<br />  boolean mergePhaseFinished = false;<br />  if (inMemoryMapOutputs.size() &gt; 0) {<br />    TaskID mapId = inMemoryMapOutputs.get(0).getMapId().getTaskID();<br />    inMemToDiskBytes = createInMemorySegments(inMemoryMapOutputs, <br />    memDiskSegments,<br />    maxInMemReduce);<br />    final int numMemDiskSegments = memDiskSegments.size();<br />    if (numMemDiskSegments &gt; 0 &amp;&amp;<br />          ioSortFactor &gt; onDiskMapOutputs.size()) {<br /><br />      // If we reach here, it implies that we have less than io.sort.factor<br />      // disk segments and this will be incremented by 1 (result of the <br />      // memory segments merge). Since this total would still be <br />      // &lt;= io.sort.factor, we will not do any more intermediate merges,<br />      // the merge of all these disk segments would be directly fed to the<br />      // reduce method<br /><br />      mergePhaseFinished = true;<br />      // must spill to disk, but can't retain in-mem for intermediate merge<br />      final Path outputPath = <br />        mapOutputFile.getInputFileForWrite(mapId,<br />                                             inMemToDiskBytes).suffix(<br />                                               Task.MERGED_OUTPUT_PREFIX);<br />      <b>final </b><b>RawKeyValueIterator rIter = Merger.merge(job<span>, </span>fs<span>,<br /></span>        keyClass<span>, </span>valueClass<span>, </span>memDiskSegments<span>, </span>numMemDiskSegments<span>,<br /></span>        tmpDir<span>, </span>comparator<span>, </span>reporter<span>, </span>spilledRecordsCounter<span>, null, <br /></span>        mergePhase)<span>;<br /></span><span><br /></span></b>      FSDataOutputStream out = CryptoUtils.wrapIfNecessary(job, fs.create(outputPath));<br />      Writer&lt;K, V&gt; writer = new Writer&lt;K, V&gt;(job, out, keyClass, valueClass,<br />        codec, null, true);<br />      try {<br />        Merger.writeFile(rIter, writer, reporter, job);<br />        writer.close();<br />        onDiskMapOutputs.add(new CompressAwarePath(outputPath,<br />        writer.getRawLength(), writer.getCompressedLength()));<br />        writer = null;<br />        // add to list of final disk outputs.<br />      } catch (IOException e) {<br />        if (null != outputPath) {<br />          try {<br />            fs.delete(outputPath, true);<br />          } catch (IOException ie) {<br />            // NOTHING<br />          }<br />        }<br />        throw e;<br />      } finally {<br />        if (null != writer) {<br />          writer.close();<br />        }<br />      }<br />      LOG.info("Merged " + numMemDiskSegments + " segments, " +<br />               inMemToDiskBytes + " bytes to disk to satisfy " +<br />               "reduce memory limit");<br />      inMemToDiskBytes = 0;<br />      memDiskSegments.clear();<br />    } else if (inMemToDiskBytes != 0) {<br />      LOG.info("Keeping " + numMemDiskSegments + " segments, " +<br />               inMemToDiskBytes + " bytes in memory for " +<br />               "intermediate, on-disk merge");<br />    }<br />  }<br /><br />  // segments on disk<br />  List&lt;Segment&lt;K,V&gt;&gt; diskSegments = new ArrayList&lt;Segment&lt;K,V&gt;&gt;();<br />  long onDiskBytes = inMemToDiskBytes;<br />  long rawBytes = inMemToDiskBytes;<br />  CompressAwarePath[] onDisk = onDiskMapOutputs.toArray(<br />  new CompressAwarePath[onDiskMapOutputs.size()]);<br />  for (CompressAwarePath file : onDisk) {<br />    long fileLength = fs.getFileStatus(file).getLen();<br />    onDiskBytes += fileLength;<br />    rawBytes += (file.getRawDataLength() &gt; 0) ? file.getRawDataLength() : fileLength;<br /><br />    LOG.debug("Disk file: " + file + " Length is " + fileLength);<br />    diskSegments.add(new Segment&lt;K, V&gt;(job, fs, file, codec, keepInputs,<br />                                        (file.toString().endsWith(<br />                                           Task.MERGED_OUTPUT_PREFIX) ?<br />                                        null : mergedMapOutputsCounter), file.getRawDataLength()<br />                                      ));<br />  }<br />  LOG.info("Merging " + onDisk.length + " files, " +<br />           onDiskBytes + " bytes from disk");<br />  Collections.sort(diskSegments, new Comparator&lt;Segment&lt;K,V&gt;&gt;() {<br />    public int compare(Segment&lt;K, V&gt; o1, Segment&lt;K, V&gt; o2) {<br />      if (o1.getLength() == o2.getLength()) {<br />        return 0;<br />      }<br />      return o1.getLength() &lt; o2.getLength() ? -1 : 1;<br />    }<br />  });<br /><br />  // build final list of segments from merged backed by disk + in-mem<br />  List&lt;Segment&lt;K,V&gt;&gt; finalSegments = new ArrayList&lt;Segment&lt;K,V&gt;&gt;();<br />  long inMemBytes = createInMemorySegments(inMemoryMapOutputs, <br />                                           finalSegments, 0);<br />  LOG.info("Merging " + finalSegments.size() + " segments, " +<br />           inMemBytes + " bytes from memory into reduce");<br />  if (0 != onDiskBytes) {<br />    final int numInMemSegments = memDiskSegments.size();<br />    diskSegments.addAll(0, memDiskSegments);<br />    memDiskSegments.clear();<br />    // Pass mergePhase only if there is a going to be intermediate<br />    // merges. See comment where mergePhaseFinished is being set<br />    Progress thisPhase = (mergePhaseFinished) ? null : mergePhase; <br /><b>    RawKeyValueIterator diskMerge = Merger.merge(<br />                           job, fs, keyClass, valueClass, codec, diskSegments,<br />                           ioSortFactor, numInMemSegments, tmpDir, comparator,<br />                           reporter, false, spilledRecordsCounter, null, thisPhase);<br /></b>    diskSegments.clear();<br />    if (0 == finalSegments.size()) { <br />      return diskMerge;<br />    }<br />    finalSegments.add(new Segment&lt;K,V&gt;(<br />                  new RawKVIteratorReader(diskMerge, onDiskBytes), true, rawBytes));<br />  }<br />  <b>return Merger.merge(job, fs, keyClass, valueClass,<br />                      finalSegments, finalSegments.size(), tmpDir,<br />                      comparator, reporter, spilledRecordsCounter, null,<br />                      null);</b><br />}</pre></pre></pre></div></div></foreignObject><text x="346" y="1028" fill="#333333" text-anchor="middle" font-size="12px" font-family="'Helvetica'">[Not supported by viewer]</text></switch></g><path d="M 995 1590 L 1082.84 1901.01" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1084.27 1906.07 L 1079 1900.28 L 1082.84 1901.01 L 1085.73 1898.38 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1084.57 2138.57 L 991.1 1606.27" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 990.19 1601.1 L 994.85 1607.39 L 991.1 1606.27 L 987.96 1608.6 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 1240.29 2130 L 1337.28 2311.53" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1339.76 2316.16 L 1333.37 2311.63 L 1337.28 2311.53 L 1339.55 2308.33 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="none"/><path d="M 1336 4275.71 L 1110.95 2136.33" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><path d="M 1110.4 2131.11 L 1114.62 2137.71 L 1110.95 2136.33 L 1107.65 2138.44 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/></g></svg>